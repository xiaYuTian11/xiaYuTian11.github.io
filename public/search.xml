<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>ActiveMQ Connection Parameters</title>
      <link href="/archives/75c25f59.html"/>
      <url>/archives/75c25f59.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="# 背景" class="headerlink" title="背景"></a>背景</h2><p>​          最近项目需要搭建 ActiveMQ 进行消息传输，但是在使用过程中发现与 ActiveMQ 长时间连接，但是没进行消息传输，或者网络波动等情况会造成连接挂掉的情况，由于 ActiveMQ 是支持断线重连机制，在此记录下使用到的几个配置及其中的一个坑。</p><a id="more"></a><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a>使用 </h2><p>​        本次只在代码中使用时配置到，如果需要在服务器上配置，请查看 <span class="exturl" data-url="aHR0cHM6Ly9hY3RpdmVtcS5hcGFjaGUub3JnL2ZhaWxvdmVyLXRyYW5zcG9ydC1yZWZlcmVuY2UuaHRtbA=="> 官方文档<i class="fa fa-external-link-alt"></i></span>。</p><p>** 配置多个 MQ 防止其中一个宕机。**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//randomize 是否随机访问 </span></span><br><span class="line">failover:(tcp:<span class="comment">//primary:61616,tcp://secondary:61616)?randomize=false</span></span><br></pre></td></tr></table></figure><p>** 配置消息异步发送 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//useAsyncSend 是否启用异步发送消息 </span></span><br><span class="line"><span class="comment">//producerWindowSize 当发送消息大于 10M 也会启用异步发送 </span></span><br><span class="line">jms.useAsyncSend=<span class="keyword">true</span>&amp;jms.producerWindowSize=<span class="number">10240</span> </span><br></pre></td></tr></table></figure><p>​        配置异步发送消息可以对发送消息状态进行处理，如果发送失败可以自定义进行重新发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">((ActiveMQMessageProducer) producer).send (message, <span class="keyword">new</span> AsyncCallback () &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info (<span class="string">&quot; sendMessage to &#123;&#125; : &#123;&#125;&quot;</span>, queue, text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(JMSException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            log.error (<span class="string">&quot;sendMessage to &#123;&#125; 错误，进行重试 & quot;</span>, queue);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                producer.send (message);</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                log.error (<span class="string">&quot;sendMessage to &#123;&#125; with &#123;&#125; 重试错误，消息未正确发送 & quot;</span>, queue, text);</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep (<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.error (<span class="string">&quot; 重发消息休眠异常 & quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>** 配置最大断线最大重试次数 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://activemq.apache.org/redelivery-policy</span></span><br><span class="line"><span class="comment">// 默认重试次数为 6 次，之后就会进入死信队列，-1 表示进行无限制重试 </span></span><br><span class="line">jms.redeliveryPolicy.maximumRedeliveries=-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>** 配置重新连接等待时间 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://activemq.apache.org/failover-transport-reference.html</span></span><br><span class="line"><span class="comment">//initialReconnectDelay 第一次重新连接前的延迟时间（毫秒）</span></span><br><span class="line"><span class="comment">//maxReconnectDelay 第二和后续的重新连接尝试之间的最大延迟（毫秒）。</span></span><br><span class="line">initialReconnectDelay=<span class="number">10</span>&amp;maxReconnectDelay=<span class="number">15000</span></span><br></pre></td></tr></table></figure><p>** 禁用不活动自动断线 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://activemq.apache.org/configuring-wire-formats</span></span><br><span class="line"><span class="comment">// 最大不活动时间（毫秒），超过会自动终止连接，默认是 30000ms。</span></span><br><span class="line"><span class="comment">// 禁用非活动监视将值设置为 &lt;= 0 即可。</span></span><br><span class="line">wireFormat.maxInactivityDuration=<span class="number">0</span> </span><br></pre></td></tr></table></figure><h2 id="坑"><a href="# 坑" class="headerlink" title="坑"></a>坑</h2><p>​            当时禁用非活动监视时，照着官方文档上设置的如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQConnectionFactory cf = <span class="keyword">new</span> ActiveMQConnectionFactory (<span class="string">&quot;tcp://localhost:61616?wireFormat.cacheEnabled=false&amp;wireFormat.tightEncodingEnabled=false&quot;</span>);</span><br><span class="line"><span class="comment">// 将参数替换成 wireFormat.maxInactivityDuration=0 </span></span><br><span class="line">ActiveMQConnectionFactory cf = <span class="keyword">new</span> ActiveMQConnectionFactory (<span class="string">&quot;tcp://localhost:61616?wireFormat.maxInactivityDuration=0&quot;</span>);</span><br></pre></td></tr></table></figure><p>​            启动生成者时出现错误：<strong>Invalid connect parameters: {wireFormat.maxInactivityDuration=0}</strong></p><p><img src="./75c25f59/image-20200902151227315.png" alt="image-20200902151227315"></p><p>​        正确的设置方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failover:<span class="comment">//(tcp://47.110.133.228:61616?wireFormat.maxInactivityDuration=0)?jms.useAsyncSend=true......</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL Logical Replication (逻辑复制)</title>
      <link href="/archives/8c55eb1b.html"/>
      <url>/archives/8c55eb1b.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="# 概述" class="headerlink" title="概述"></a> 概述 </h2><p>​        Postgres 9.4（2014 年 12 月发布）引入了一项称为逻辑复制（Logical Replication）的新功能。逻辑复制允许从数据库实时流式传输到外部系统的更改。物理复制和逻辑复制的区别在于逻辑复制以逻辑格式发送数据，而物理复制以二进制格式发送数据。</p><a id="more"></a><p>​        详细介绍查看官方文档：<span class="exturl" data-url="aHR0cHM6Ly9qZGJjLnBvc3RncmVzcWwub3JnL2RvY3VtZW50YXRpb24vaGVhZC9yZXBsaWNhdGlvbi5odG1s">https://jdbc.postgresql.org/documentation/head/replication.html<i class="fa fa-external-link-alt"></i></span></p><h2 id="配置"><a href="# 配置" class="headerlink" title="配置"></a> 配置 </h2><p>​        Postgresql 要想使用逻辑复制必须先将 postgresql. conf 中 wal_level 配置为 logical, 相应的 max_wal_senders 复制使用者的数量要合理配置，max_replication_slots 要使用逻辑复制必须大于 0；</p><p><code>postgresql. conf</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wal_level = logical</span><br><span class="line">max_wal_senders = 8</span><br><span class="line">max_replication_slots = 2</span><br></pre></td></tr></table></figure><p><code>pg_hba. conf</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local   replication   all                   trust</span><br><span class="line">host    replication   all   127.0.0.1/32    md5</span><br><span class="line">host    replication   all   ::1/128         md5</span><br><span class="line">hostall  all   0.0.0.0/0md5  </span><br><span class="line"># 更多配置含义查看：http://shouce.jb51.net/postgresql9_4_4/auth-pg-hba-conf.html</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a> 使用 </h2><p>​          逻辑复制使用复制槽在服务器上保留 WAL 日志，并定义用于将 WAL 日志解码为所需格式的解码插件，例如，您可以将更改解码为 json 等格式。这里方便演示使用 test_decoding 插件进行解码。</p><p>​          更多插件查看：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLnBvc3RncmVzcWwub3JnL3dpa2kvTG9naWNhbF9EZWNvZGluZ19QbHVnaW5z">https://wiki.postgresql.org/wiki/Logical_Decoding_Plugins<i class="fa fa-external-link-alt"></i></span></p><p>** 针对整个数据库的逻辑复制 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException, InterruptedException </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;jdbc:postgresql://127.0.0.1:5432/dev&quot;</span>;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties ();</span><br><span class="line">        PGProperty.USER.set (props, <span class="string">&quot;postgres&quot;</span>);</span><br><span class="line">        PGProperty.PASSWORD.set (props, <span class="string">&quot;20191809&quot;</span>);</span><br><span class="line">        PGProperty.ASSUME_MIN_SERVER_VERSION.set (props, <span class="string">&quot;9.4&quot;</span>);</span><br><span class="line">        PGProperty.REPLICATION.set (props, <span class="string">&quot;database&quot;</span>);</span><br><span class="line">        PGProperty.PREFER_QUERY_MODE.set (props, <span class="string">&quot;simple&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection con = DriverManager.getConnection (url, props);</span><br><span class="line">        PGConnection replConnection = con.unwrap (PGConnection.class);</span><br><span class="line">        Statement statement = con.createStatement ();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除复制槽 </span></span><br><span class="line">        <span class="comment">//replConnection.getReplicationAPI ().dropReplicationSlot (&quot;demo_logical_slot&quot;);</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 创建 demo_logical_slot</span></span><br><span class="line">        replConnection.getReplicationAPI ()</span><br><span class="line">                .createReplicationSlot ()</span><br><span class="line">                .logical ()</span><br><span class="line">                .withSlotName (<span class="string">&quot;demo_logical_slot&quot;</span>)</span><br><span class="line">                .withOutputPlugin (<span class="string">&quot;test_decoding&quot;</span>)</span><br><span class="line">                .make ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建逻辑复制流，设置超时时间 </span></span><br><span class="line">        PGReplicationStream stream = replConnection.getReplicationAPI ()</span><br><span class="line">                .replicationStream ()</span><br><span class="line">                .logical ()</span><br><span class="line">                .withSlotName (<span class="string">&quot;demo_logical_slot&quot;</span>)</span><br><span class="line">                .withSlotOption (<span class="string">&quot;include-xids&quot;</span>, <span class="keyword">false</span>)</span><br><span class="line">                .withSlotOption (<span class="string">&quot;skip-empty-xacts&quot;</span>, <span class="keyword">true</span>)</span><br><span class="line">                .withStatusInterval (<span class="number">20</span>, TimeUnit.SECONDS)</span><br><span class="line">                .start ();</span><br><span class="line">        </span><br><span class="line">       <span class="comment">// 更改数据库表数据，这里可以获取数据 </span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//non blocking receive message</span></span><br><span class="line">            ByteBuffer msg = stream.readPending ();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep (<span class="number">10L</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> offset = msg.arrayOffset ();</span><br><span class="line">            <span class="keyword">byte</span>[] source = msg.array ();</span><br><span class="line">            <span class="keyword">int</span> length = source.length - offset;</span><br><span class="line">            <span class="keyword">final</span> String s = <span class="keyword">new</span> String (source, offset, length);</span><br><span class="line">            System.out.println (s);</span><br><span class="line">            <span class="comment">//feedback</span></span><br><span class="line">            <span class="comment">// 反馈服务器，向服务器提供已成功接收并应用于消费者的日志序列编号 （LSN）</span></span><br><span class="line">            stream.setAppliedLSN (stream.getLastReceiveLSN ());</span><br><span class="line">            stream.setFlushedLSN (stream.getLastReceiveLSN ());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>** 只针对指定表的逻辑复制 **</p><p> 步骤：</p><p>1。创建针对表创建订阅，及接收数据的操作类型 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> PUBLICATION YOUR_PUBLICATION_NAME) <span class="keyword">FOR</span> <span class="keyword">TABLE</span> YOUR_TABLE_NAME <span class="keyword">WITH</span> (publish = <span class="string">&#x27;insert,update,delete&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2。设置表同步数据的字段，最后 FULL 参数可变。</p><p> 参照官方文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy8xMC9zcWwtYWx0ZXJ0YWJsZS5odG1sI1NRTC1DUkVBVEVUQUJMRS1SRVBMSUNBLUlERU5USVRZ">https://www.postgresql.org/docs/10/sql-altertable.html#SQL-CREATETABLE-REPLICA-IDENTITY<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME REPLICA <span class="keyword">IDENTITY</span> <span class="keyword">FULL</span></span><br></pre></td></tr></table></figure><p>3。创建复制槽 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE_REPLICATION_SLOT  YOUR_SOLT_NAME  有效期  LOGICAL 解码插件名称；</span><br></pre></td></tr></table></figure><p>4。获取 PGReplicationStream，同上。</p><p> 详情参照官方文档地址：<span class="exturl" data-url="aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzExL3NxbC1jcmVhdGVwdWJsaWNhdGlvbi5odG1s">http://www.postgres.cn/docs/11/sql-createpublication.html<i class="fa fa-external-link-alt"></i></span></p><p> 解码插件可以参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RlYmV6aXVtL2RlYmV6aXVt">https://github.com/debezium/debezium<i class="fa fa-external-link-alt"></i></span></p>]]></content>
      
      
      
        <tags>
            
            <tag> Postgresql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
