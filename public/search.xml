<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Spring Boot logback.xml 读取 yml 中配置</title>
      <link href="/archives/cc464ebf.html"/>
      <url>/archives/cc464ebf.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="# 背景" class="headerlink" title="背景"></a> 背景 </h2><p>​            最近部署 Spring Boot 项目时发现在 logback.xml 中配置的日志存放路径为相对路径，导致我以不同的方式启动项目时，日志文件生成的目录是不一致的，所以决定将 logback.xml 中的日志文件存放路径改为相对路径，但是在使用中发现 logback.xml 不能读取到 yml 中的属性。</p><a id="more"></a><h2 id="配置"><a href="# 配置" class="headerlink" title="配置"></a> 配置 </h2><p>​        由于 Spring Boot 时加载顺序是先加载 logback.xml, 在加载 application.yml, 最后在加载 logback-spring.xml 文件。所以直接在 logback.xml 中配置读取 yml 是不行的。下面说下解决方案。</p><h3 id="1- 在 -yml- 文件中配置日志存放路径"><a href="#1- 在 -yml- 文件中配置日志存放路径" class="headerlink" title="1. 在 yml 文件中配置日志存放路径"></a>1. 在 yml 文件中配置日志存放路径 </h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/usr/soft/test/logs</span></span><br></pre></td></tr></table></figure><h3 id="2- 将 -logback-xml- 名称改为 -logback-spring-xml"><a href="#2- 将 -logback-xml- 名称改为 -logback-spring-xml" class="headerlink" title="2. 将 logback.xml 名称改为 logback-spring.xml"></a>2. 将 logback.xml 名称改为 logback-spring.xml</h3><h3 id="3- 在 -logback-spring-xml- 加入 -spring- 属性读取 -yml- 配置"><a href="#3- 在 -logback-spring-xml- 加入 -spring- 属性读取 -yml- 配置" class="headerlink" title="3. 在 logback-spring.xml 加入 spring 属性读取 yml 配置"></a>3. 在 logback-spring.xml 加入 spring 属性读取 yml 配置 </h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logPath&quot;</span> <span class="attr">source</span>=<span class="string">&quot;log.file.path&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;logs&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4- 使用配置"><a href="#4- 使用配置" class="headerlink" title="4. 使用配置"></a>4. 使用配置 </h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;logPath&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​        配置完成后，部署时就可以在启动前修改 application.yml 文件中的相关配置，达到自定义的目的。</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot,logback </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ServiceLoader (SPI)</title>
      <link href="/archives/c575efb2.html"/>
      <url>/archives/c575efb2.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="# 概述" class="headerlink" title="概述"></a>概述</h2><p>​        最近学习 Spring Boot 启动过程时，发现加载配置类时用到了 <code>java.util.ServiceLoader</code>，后来发现不止 Spring Boot 用到，其他很多框架，譬如 Dubbo，JDBC，日志框架等。</p><p>​        SPI 的核心思想就是解耦。定则规则，然后其他人进行自定义实现规则。</p><a id="more"></a><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a>使用 </h2><h3 id="代码"><a href="# 代码" class="headerlink" title="代码"></a> 代码</h3><p>SPI 的使用其实非常简单，主要分为以下几个步骤：</p><ul><li><p>定义一个接口及一个或多个实现类。</p></li><li><p>实现类必须带有无参构造方法。</p></li><li><p>在 resources 目录下创建 META-INF/services 目录，在 services 下创建一个以接口的全限定名为文件名的文件，将实现类的全限定名记录到这个文件里面，如果有多个实现类，直接换行进行记录，每行一个实现类。</p></li><li><p>通过 java.util.ServiceLoader load 方法进行加载。</p></li><li><p>  定义一个 Trip 接口：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sunnyday.jdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Trip</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  定义两个实现类：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sunnyday.jdk.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunTrip</span> <span class="keyword">implements</span> <span class="title">Trip</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot; 跑步前进 & quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WalkTrip</span> <span class="keyword">implements</span> <span class="title">Trip</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot; 步行方式 & quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code>在 resources/META-INF/services 下创建名为 com.sunnyday.jdk.Trip 的文件，内容如下：<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.sunnyday.jdk.impl.RunTrip</span><br><span class="line">com.sunnyday.jdk.impl.WalkTrip</span><br></pre></td></tr></table></figure></code></pre><h3 id="测试"><a href="# 测试" class="headerlink" title="测试"></a>测试 </h3><p> 执行测试方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void test () &#123;</span><br><span class="line">      final ClassLoader classLoader &#x3D; this.getClass ().getClassLoader ();</span><br><span class="line">      final ServiceLoader&lt;Trip&gt; load &#x3D; ServiceLoader.load (Trip.class, classLoader);</span><br><span class="line">      for (Trip next : load) &#123;</span><br><span class="line">          next.mode ();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 跑步前进 </span><br><span class="line"> 步行方式 </span><br></pre></td></tr></table></figure><h2 id="免配置文件"><a href="# 免配置文件" class="headerlink" title="免配置文件"></a>免配置文件</h2><p>​        auto-service 是 Google 提供的工具类，可以在实现类上添加 @AutoService 注解并指定接口，可以省去手动配置类全限定名的麻烦。</p><p>代码：</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sunnyday.google;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> TMW</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/8 15:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sunnyday.google.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.auto.service.AutoService;</span><br><span class="line"><span class="keyword">import</span> com.sunnyday.google.Weather;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> TMW</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/8 15:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoService (Weather.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SunnyWeather</span> <span class="keyword">implements</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot; 明天艳阳高照 & quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@AutoService (Weather.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RainWeather</span> <span class="keyword">implements</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot; 明天将要下雨 & quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ClassLoader classLoader = <span class="keyword">this</span>.getClass ().getClassLoader ();</span><br><span class="line">    <span class="keyword">final</span> ServiceLoader&lt;Weather&gt; weathers = ServiceLoader.load (Weather.class, classLoader);</span><br><span class="line">    <span class="keyword">for</span> (Weather weather : weathers) &#123;</span><br><span class="line">        weather.report ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不用添加配置文件，运行测试类可以看到控制台一样可以正常输出。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 明天将要下雨 </span><br><span class="line"> 明天艳阳高照 </span><br></pre></td></tr></table></figure><p>源码参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYVl1VGlhbjExL2Jsb2dfZGVtby90cmVlL21hc3Rlci9TUEk=">https://github.com/xiaYuTian11/blog_demo/tree/master/SPI<i class="fa fa-external-link-alt"></i></span></p>]]></content>
      
      
      
        <tags>
            
            <tag> Jdk </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>InputStream 中文乱码</title>
      <link href="/archives/fe88a97f.html"/>
      <url>/archives/fe88a97f.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="# 背景" class="headerlink" title="背景"></a> 背景 </h2><p>​        最近进行项目重构，发现之前文件读取重构之后出现数据乱码。最后发现是因为字节流的问题。</p><a id="more"></a><h2 id="字节流"><a href="# 字节流" class="headerlink" title="字节流"></a> 字节流 </h2><p>​         字节流是按照字节为基本单位来读取数据的 ，中文是占两个字节的，所以读取的时候可能出现丢失的情况。</p><p>​        读取文件 garbledTest.txt  内容如下 </p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 滕王阁序 </span><br><span class="line">　　 豫章故郡，洪都新府。星分翼轸 (zhěn)，地接衡庐。襟三江而带五湖，控蛮荆而引瓯（ōu）越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃 (fān) 之榻。雄州雾列，俊采星驰，台隍 (huáng) 枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨 (qǐ) 戟遥临；宇文新州之懿 (yì) 范，襜 (chān) 帷 (wéi) 暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电清霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。</span><br><span class="line">　　时维九月，序属三秋。潦（lǎo）水尽而寒潭清，烟光凝而暮山紫。俨 (yǎn) 骖騑 (cān fēi) 于上路，访风景于崇阿 (ē)。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流（一作 翔）丹，下临无地。鹤汀（tīng）凫 (fú) 渚（zhǔ），穷岛屿之萦 (yíng) 回；桂殿兰宫，即（一作 列）冈峦之体势。</span><br><span class="line">　　披绣闼（tà），俯雕甍 (méng)。山原旷其盈视，川泽纡 (yū) 其骇瞩。闾 (lǘ) 阎 (yán) 扑地，钟鸣鼎食之家；舸（gě) 舰弥津，青雀黄龙之舳（zhú）。云销雨霁 (jì)，彩彻区明（或作 虹销雨霁，彩彻云衢 qú）。落霞与孤鹜 (wù) 齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡（l ǐ）之滨；雁阵惊寒，声断衡阳之浦。</span><br><span class="line">　　遥襟甫畅，逸兴遄 (chuán) 飞。爽籁发而清风生，纤歌凝而白云遏 (è)。睢 (suī) 园绿竹，气凌彭泽之樽；邺 (yè) 水朱华，光照临川之笔。四美具，二难并。穷睇眄 (dì miǎn) 于中天，极娱游于暇日。天高地迥 (jiǒng)，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会（kuài）于云间。地势极而南溟 (míng) 深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍 (hūn) 而不见，奉宣室以何年。</span><br><span class="line">　　嗟 (jiē) 乎！时运不齐，命途多舛 (chuǎn)；冯唐易老，李广难封。屈贾谊（yì）于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙（hé zhé）以犹欢。北海虽赊（shē），扶摇可接；东隅 (yú) 已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</span><br><span class="line">　　勃，三尺微命，一介书生。无路请缨，等终军之弱冠（guàn）；有怀投笔，慕宗悫（què）之长风。舍簪（zān）笏（hù）于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨 (tāo) 陪鲤对；今兹捧袂 (mèi)，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？</span><br><span class="line">　　呜呼！胜地不常，盛筵 (yán) 难再；兰亭已矣，梓 (zǐ) 泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔。　</span><br><span class="line">　　滕王高阁临江渚，佩玉鸣鸾罢歌舞。</span><br><span class="line">　　画栋朝飞南浦云，珠帘暮卷西山雨。</span><br><span class="line">　　闲云潭影日悠悠，物换星移几度秋。</span><br><span class="line">　　阁中帝子今何在？槛外长江空自流。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 缓存字节流 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedInputStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> URL url = <span class="keyword">this</span>.getClass ().getClassLoader ().getResource (<span class="string">&quot;io/garbledTest.txt&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File (url.getPath ());</span><br><span class="line">    BufferedInputStream bips = <span class="keyword">new</span> BufferedInputStream (<span class="keyword">new</span> FileInputStream (file));</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> ((n = bips.read ()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bips.read (bytes, <span class="number">0</span>, n);</span><br><span class="line">        sb.append (<span class="keyword">new</span> String (bytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println (sb.toString ());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        字节流读取会出现乱码。</p><p>​                                                                                                                                                                                              </p><h2 id="字符流"><a href="# 字符流" class="headerlink" title="字符流"></a> 字符流 </h2><pre><code>     字符流是按照字符为基本单位来读取数据的，占两个字节，这种情况就不会出现中文乱码。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 字符流 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readerTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> URL url = <span class="keyword">this</span>.getClass ().getClassLoader ().getResource (<span class="string">&quot;io/garbledTest.txt&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File (url.getPath ());</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader (<span class="keyword">new</span> InputStreamReader (<span class="keyword">new</span> FileInputStream (file)));</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder ();</span><br><span class="line">    <span class="keyword">while</span> (br.ready ()) &#123;</span><br><span class="line">        sb.append (br.readLine ());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println (sb.toString ());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            字符流则不会乱码。</p><p> 源码参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYVl1VGlhbjExL2Jsb2dfZGVtby9ibG9iL21hc3Rlci9qYXZhOC9zcmMvdGVzdC9qYXZhL2NvbS9zdW5ueWRheS9pby9HYXJibGVkVGVzdC5qYXZh">https://github.com/xiaYuTian11/blog_demo/blob/master/java8/src/test/java/com/sunnyday/io/GarbledTest.java<i class="fa fa-external-link-alt"></i></span></p>]]></content>
      
      
      
        <tags>
            
            <tag> IO </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Spring Boot 分离资源文件打包及部署脚本</title>
      <link href="/archives/1f0b7068.html"/>
      <url>/archives/1f0b7068.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="# 概述" class="headerlink" title="概述"></a> 概述 </h2><p>​            Spring Boot 项目打包默认会将资源文件一起打包，如果涉及到现场部署会不停的更改相关配置就会很烦，所以可以采用将配置文件及相关依赖分离出来。</p><a id="more"></a><h2 id="打包"><a href="# 打包" class="headerlink" title="打包"></a> 打包 </h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 将静态资源排除出 jar 包 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>static/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>templates/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 自定义自己的配置文件 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- MANIFEST.MF 中 Class-Path 加入前缀 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- jar 包不包含唯一版本标识 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">useUniqueVersions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useUniqueVersions</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 指定启动类的包路径 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.demo.Application<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--MANIFEST.MF 中 Class-Path 加入资源文件目录 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Class-Path</span>&gt;</span>config/<span class="tag">&lt;/<span class="name">Class-Path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 指定打出的 jar 包路径 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这个插件是用来复制项目依赖的 jar 包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 自定义 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 复制依赖的 jar 包 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 将依赖的 jar 包复制到该路径下 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 这个插件是用来复制项目的静态资源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 自定义 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 复制静态资源 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!-- 指定静态资源的路径 --&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!-- 指定需要复制的文件 --&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>static/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>templates/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 指定复制到该目录下 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 以上配置后你的文件打包后的文件目录如下 </span></span><br><span class="line"><span class="comment">                -lib</span></span><br><span class="line"><span class="comment">                -config</span></span><br><span class="line"><span class="comment">                - 项目名.jar</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这个插件使用来将分离出来的静态资源和依赖的 jar 包 (就是上面说到的文件目录)，</span></span><br><span class="line"><span class="comment">        压缩成一个 zip 文件。个人感觉这个蛮方便的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 这个插件需要指定一个配置文件 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>src/main/resources/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 自定义 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 只执行一次 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​            关于 MANIFEST.MF 的介绍可以查看 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzODc2ODc3ODkzNjQw"> 这篇博客 <i class="fa fa-external-link-alt"></i></span>。</p><h3 id="assembly-xml"><a href="#assembly-xml" class="headerlink" title="assembly.xml"></a>assembly.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://maven.apache.org/xsd/assembly-1.1.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>package<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以根据自己的需求定义压缩文件的格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不包含根目录，如果为 true，生成的压缩文件会有一个根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>false<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定需要压缩的文件清单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定你需要压缩的文件目录 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;/lib/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定压缩后的文件目录 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;/config/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义 shell 脚本存放路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>shell/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.sh<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="loader-path"><a href="#loader-path" class="headerlink" title="loader.path"></a>loader.path</h3><p>​        资源文件打包分离后，启动 jar 时不能正常加载资源目录及 lib,，解决方案是在启动时添加 loader.path 参数，具体可以参考官方文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2V4ZWN1dGFibGUtamFyLWxhdW5jaGluZw==">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#executable-jar-launching<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jar lib resource 位于同一文件夹下 </span></span><br><span class="line">java -jar -Xms512m -Xmx2048m -Dloader.path=lib,resources test.jar</span><br></pre></td></tr></table></figure><h2 id="部署脚本"><a href="# 部署脚本" class="headerlink" title="部署脚本"></a> 部署脚本 </h2><h3 id="deploy-sh"><a href="#deploy-sh" class="headerlink" title="deploy.sh"></a>deploy.sh</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># 这里可替换为你自己的执行程序，其他代码无需更改 </span><br><span class="line">APP_NAME=pgsql-0.0.1.jar</span><br><span class="line">JVM=&quot;-server -Xms512m -Xmx2048m &quot;</span><br><span class="line">CONFIG_PATH=&quot;  -Dloader.path=lib,config&quot;</span><br><span class="line">APPFILE_PATH=&quot;/usr/soft/sync/&quot;</span><br><span class="line"># 使用说明，用来提示输入参数 </span><br><span class="line">usage () &#123;</span><br><span class="line">echo &quot;Usage: sh 执行脚本.sh [start|stop|restart|status]&quot;</span><br><span class="line">exit 1</span><br><span class="line">&#125;</span><br><span class="line"># 检查程序是否在运行 </span><br><span class="line">is_exist ()&#123;</span><br><span class="line">pid=`ps -ef|grep $APP_NAME|grep -v grep|awk &#x27;&#123;print $2&#125;&#x27;`</span><br><span class="line"># 如果不存在返回 1, 存在返回 0</span><br><span class="line">if [-z &quot;$&#123;pid&#125;&quot;]; then</span><br><span class="line">return 1</span><br><span class="line">else</span><br><span class="line">return 0</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"># 启动方法 </span><br><span class="line">start ()&#123;</span><br><span class="line">is_exist</span><br><span class="line">if [$? -eq &quot;0&quot;]; then</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; is already running. pid=$&#123;pid&#125; .&quot;</span><br><span class="line">else</span><br><span class="line">nohup java $JVM -jar $CONFIG_PATH $APPFILE_PATH$APP_NAME &gt; /dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">echo &quot; 启动成功 & quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"># 停止方法 </span><br><span class="line">stop ()&#123;</span><br><span class="line">is_exist</span><br><span class="line">if [$? -eq &quot;0&quot;]; then</span><br><span class="line">kill -9 $pid</span><br><span class="line">else</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; is not running&quot;</span><br><span class="line">echo &quot; 停止成功 & quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"># 输出运行状态 </span><br><span class="line">status ()&#123;</span><br><span class="line">is_exist</span><br><span class="line">if [$? -eq &quot;0&quot;]; then</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; is running. Pid is $&#123;pid&#125;&quot;</span><br><span class="line">else</span><br><span class="line">echo &quot;$&#123;APP_NAME&#125; is NOT running.&quot;</span><br><span class="line">fi</span><br><span class="line">&#125;</span><br><span class="line"># 重启 </span><br><span class="line">restart ()&#123;</span><br><span class="line">stop</span><br><span class="line">start</span><br><span class="line">&#125;</span><br><span class="line"># 根据输入参数，选择执行对应方法，不输入则执行使用说明 </span><br><span class="line">case &quot;$1&quot; in</span><br><span class="line">&quot;start&quot;)</span><br><span class="line">start</span><br><span class="line">;;</span><br><span class="line">&quot;stop&quot;)</span><br><span class="line">stop</span><br><span class="line">;;</span><br><span class="line">&quot;status&quot;)</span><br><span class="line">status</span><br><span class="line">;;</span><br><span class="line">&quot;restart&quot;)</span><br><span class="line">restart</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">usage</span><br><span class="line">;;</span><br><span class="line">esac</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="dos2unix"><a href="#dos2unix" class="headerlink" title="dos2unix"></a>dos2unix</h2><p>​            windows 上编写的脚本在 Linux 上运行会出现错误，可以用 dos2unix 进行转义。</p><ol><li> 安装 dos2unix</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y dos2unix</span><br></pre></td></tr></table></figure><ol start="2"><li> 转义 sh 文件 </li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dos2unix deploy.sh</span><br></pre></td></tr></table></figure><p>​            转义成功就可以正常运行了 </p><h2 id="Linux- 开机自启动 -SpringBoot- 项目"><a href="#Linux- 开机自启动 -SpringBoot- 项目" class="headerlink" title="Linux 开机自启动 SpringBoot 项目"></a>Linux 开机自启动 SpringBoot 项目 </h2><ol><li><p> 编写启动脚本 deploy.sh，参考上面。</p></li><li><p> 给 deploy.sh 文件添加执行权限 </p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/soft/sync/deploy.sh</span><br></pre></td></tr></table></figure><ol start="3"><li> 给 /etc/rc.d/rc.local 文件添加执行权限 </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><ol start="4"><li> 在 /etc/rc.d/rc.local 文件末尾添加启动脚本命令 </li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - root -c <span class="string">&#x27;/usr/soft/sync/deploy.sh start&#x27;</span></span><br></pre></td></tr></table></figure><ol start="5"><li> 重启服务器验证脚本是否自启动成功。</li></ol><p> 相关配置可以根据自己需求进行修改，至此就可以愉快的进行玩耍啦！</p>]]></content>
      
      
      
        <tags>
            
            <tag> SpringBoot </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ActiveMQ Connection Parameters</title>
      <link href="/archives/75c25f59.html"/>
      <url>/archives/75c25f59.html</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="# 背景" class="headerlink" title="背景"></a>背景</h2><p>​          最近项目需要搭建 ActiveMQ 进行消息传输，但是在使用过程中发现与 ActiveMQ 长时间连接，但是没进行消息传输，或者网络波动等情况会造成连接挂掉的情况，由于 ActiveMQ 是支持断线重连机制，在此记录下使用到的几个配置及其中的一个坑。</p><a id="more"></a><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a>使用 </h2><p>​        本次只在代码中使用时配置到，如果需要在服务器上配置，请查看 <span class="exturl" data-url="aHR0cHM6Ly9hY3RpdmVtcS5hcGFjaGUub3JnL2ZhaWxvdmVyLXRyYW5zcG9ydC1yZWZlcmVuY2UuaHRtbA=="> 官方文档<i class="fa fa-external-link-alt"></i></span>。</p><p>** 配置多个 MQ 防止其中一个宕机。**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//randomize 是否随机访问 </span></span><br><span class="line">failover:(tcp:<span class="comment">//primary:61616,tcp://secondary:61616)?randomize=false</span></span><br></pre></td></tr></table></figure><p>** 配置消息异步发送 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//useAsyncSend 是否启用异步发送消息 </span></span><br><span class="line"><span class="comment">//producerWindowSize 当发送消息大于 10M 也会启用异步发送 </span></span><br><span class="line">jms.useAsyncSend=<span class="keyword">true</span>&amp;jms.producerWindowSize=<span class="number">10240</span> </span><br></pre></td></tr></table></figure><p>​        配置异步发送消息可以对发送消息状态进行处理，如果发送失败可以自定义进行重新发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">((ActiveMQMessageProducer) producer).send (message, <span class="keyword">new</span> AsyncCallback () &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info (<span class="string">&quot; sendMessage to &#123;&#125; : &#123;&#125;&quot;</span>, queue, text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(JMSException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            log.error (<span class="string">&quot;sendMessage to &#123;&#125; 错误，进行重试 & quot;</span>, queue);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                producer.send (message);</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                log.error (<span class="string">&quot;sendMessage to &#123;&#125; with &#123;&#125; 重试错误，消息未正确发送 & quot;</span>, queue, text);</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep (<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.error (<span class="string">&quot; 重发消息休眠异常 & quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>** 配置最大断线最大重试次数 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://activemq.apache.org/redelivery-policy</span></span><br><span class="line"><span class="comment">// 默认重试次数为 6 次，之后就会进入死信队列，-1 表示进行无限制重试 </span></span><br><span class="line">jms.redeliveryPolicy.maximumRedeliveries=-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>** 配置重新连接等待时间 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://activemq.apache.org/failover-transport-reference.html</span></span><br><span class="line"><span class="comment">//initialReconnectDelay 第一次重新连接前的延迟时间（毫秒）</span></span><br><span class="line"><span class="comment">//maxReconnectDelay 第二和后续的重新连接尝试之间的最大延迟（毫秒）。</span></span><br><span class="line">initialReconnectDelay=<span class="number">10</span>&amp;maxReconnectDelay=<span class="number">15000</span></span><br></pre></td></tr></table></figure><p>** 禁用不活动自动断线 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://activemq.apache.org/configuring-wire-formats</span></span><br><span class="line"><span class="comment">// 最大不活动时间（毫秒），超过会自动终止连接，默认是 30000ms。</span></span><br><span class="line"><span class="comment">// 禁用非活动监视将值设置为 &lt;= 0 即可。</span></span><br><span class="line">wireFormat.maxInactivityDuration=<span class="number">0</span> </span><br></pre></td></tr></table></figure><h2 id="坑"><a href="# 坑" class="headerlink" title="坑"></a>坑</h2><p>​            当时禁用非活动监视时，照着官方文档上设置的如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQConnectionFactory cf = <span class="keyword">new</span> ActiveMQConnectionFactory (<span class="string">&quot;tcp://localhost:61616?wireFormat.cacheEnabled=false&amp;wireFormat.tightEncodingEnabled=false&quot;</span>);</span><br><span class="line"><span class="comment">// 将参数替换成 wireFormat.maxInactivityDuration=0 </span></span><br><span class="line">ActiveMQConnectionFactory cf = <span class="keyword">new</span> ActiveMQConnectionFactory (<span class="string">&quot;tcp://localhost:61616?wireFormat.maxInactivityDuration=0&quot;</span>);</span><br></pre></td></tr></table></figure><p>​            启动生成者时出现错误：<strong>Invalid connect parameters: {wireFormat.maxInactivityDuration=0}</strong></p><p><img src="./75c25f59/image-20200902151227315.png" alt="image-20200902151227315"></p><p>​        正确的设置方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failover:<span class="comment">//(tcp://47.110.133.228:61616?wireFormat.maxInactivityDuration=0)?jms.useAsyncSend=true......</span></span><br></pre></td></tr></table></figure><h2 id="Failover-（故障转移）"><a href="#Failover-（故障转移）" class="headerlink" title="Failover （故障转移）"></a>Failover （故障转移）</h2><p>​            启用故障转移后，当由于某种原因与当前服务器的连接丢失时，客户端可以自动重新连接到另一台服务器。故障转移 URI 始终使用故障转移前缀启动，服务器的 URI 列表包含在一组括号中。</p><p>​            Failover URL 示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failover:(tcp://host1:5672,tcp://host2:5672)</span><br></pre></td></tr></table></figure><p>​            <code>Failover 模式默认会无限次的断线自动重连</code>。更多的配置可以参考 <span class="exturl" data-url="aHR0cHM6Ly9hY3RpdmVtcS5hcGFjaGUub3JnL2NvbXBvbmVudHMvbm1zL3Byb3ZpZGVycy9hbXFwL3VyaS1jb25maWd1cmF0aW9u">Failover Configuration options<i class="fa fa-external-link-alt"></i></span></p>]]></content>
      
      
      
        <tags>
            
            <tag> ActiveMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>PostgreSQL Logical Replication (逻辑复制)</title>
      <link href="/archives/8c55eb1b.html"/>
      <url>/archives/8c55eb1b.html</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="# 概述" class="headerlink" title="概述"></a> 概述 </h2><p>​        Postgres 9.4（2014 年 12 月发布）引入了一项称为逻辑复制（Logical Replication）的新功能。逻辑复制允许从数据库实时流式传输到外部系统的更改。物理复制和逻辑复制的区别在于逻辑复制以逻辑格式发送数据，而物理复制以二进制格式发送数据。</p><a id="more"></a><p>​        详细介绍查看官方文档：<span class="exturl" data-url="aHR0cHM6Ly9qZGJjLnBvc3RncmVzcWwub3JnL2RvY3VtZW50YXRpb24vaGVhZC9yZXBsaWNhdGlvbi5odG1s">https://jdbc.postgresql.org/documentation/head/replication.html<i class="fa fa-external-link-alt"></i></span></p><h2 id="配置"><a href="# 配置" class="headerlink" title="配置"></a> 配置 </h2><p>​        Postgresql 要想使用逻辑复制必须先将 postgresql. conf 中 wal_level 配置为 logical, 相应的 max_wal_senders 复制使用者的数量要合理配置，max_replication_slots 要使用逻辑复制必须大于 0；</p><p><code>postgresql. conf</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wal_level = logical</span><br><span class="line">max_wal_senders = 8</span><br><span class="line">max_replication_slots = 2</span><br></pre></td></tr></table></figure><p><code>pg_hba. conf</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local   replication   all                   trust</span><br><span class="line">host    replication   all   127.0.0.1/32    md5</span><br><span class="line">host    replication   all   ::1/128         md5</span><br><span class="line">hostall  all   0.0.0.0/0md5  </span><br><span class="line"># 更多配置含义查看：http://shouce.jb51.net/postgresql9_4_4/auth-pg-hba-conf.html</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a> 使用 </h2><p>​          逻辑复制使用复制槽在服务器上保留 WAL 日志，并定义用于将 WAL 日志解码为所需格式的解码插件，例如，您可以将更改解码为 json 等格式。这里方便演示使用 test_decoding 插件进行解码。</p><p>​          更多插件查看：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLnBvc3RncmVzcWwub3JnL3dpa2kvTG9naWNhbF9EZWNvZGluZ19QbHVnaW5z">https://wiki.postgresql.org/wiki/Logical_Decoding_Plugins<i class="fa fa-external-link-alt"></i></span></p><p>** 针对整个数据库的逻辑复制 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException, InterruptedException </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;jdbc:postgresql://127.0.0.1:5432/dev&quot;</span>;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties ();</span><br><span class="line">        PGProperty.USER.set (props, <span class="string">&quot;postgres&quot;</span>);</span><br><span class="line">        PGProperty.PASSWORD.set (props, <span class="string">&quot;20191809&quot;</span>);</span><br><span class="line">        PGProperty.ASSUME_MIN_SERVER_VERSION.set (props, <span class="string">&quot;9.4&quot;</span>);</span><br><span class="line">        PGProperty.REPLICATION.set (props, <span class="string">&quot;database&quot;</span>);</span><br><span class="line">        PGProperty.PREFER_QUERY_MODE.set (props, <span class="string">&quot;simple&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection con = DriverManager.getConnection (url, props);</span><br><span class="line">        PGConnection replConnection = con.unwrap (PGConnection.class);</span><br><span class="line">        Statement statement = con.createStatement ();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除复制槽 </span></span><br><span class="line">        <span class="comment">//replConnection.getReplicationAPI ().dropReplicationSlot (&quot;demo_logical_slot&quot;);</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 创建 demo_logical_slot</span></span><br><span class="line">        replConnection.getReplicationAPI ()</span><br><span class="line">                .createReplicationSlot ()</span><br><span class="line">                .logical ()</span><br><span class="line">                .withSlotName (<span class="string">&quot;demo_logical_slot&quot;</span>)</span><br><span class="line">                .withOutputPlugin (<span class="string">&quot;test_decoding&quot;</span>)</span><br><span class="line">                .make ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建逻辑复制流，设置超时时间 </span></span><br><span class="line">        PGReplicationStream stream = replConnection.getReplicationAPI ()</span><br><span class="line">                .replicationStream ()</span><br><span class="line">                .logical ()</span><br><span class="line">                .withSlotName (<span class="string">&quot;demo_logical_slot&quot;</span>)</span><br><span class="line">                .withSlotOption (<span class="string">&quot;include-xids&quot;</span>, <span class="keyword">false</span>)</span><br><span class="line">                .withSlotOption (<span class="string">&quot;skip-empty-xacts&quot;</span>, <span class="keyword">true</span>)</span><br><span class="line">                .withStatusInterval (<span class="number">20</span>, TimeUnit.SECONDS)</span><br><span class="line">                .start ();</span><br><span class="line">        </span><br><span class="line">       <span class="comment">// 更改数据库表数据，这里可以获取数据 </span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//non blocking receive message</span></span><br><span class="line">            ByteBuffer msg = stream.readPending ();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep (<span class="number">10L</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> offset = msg.arrayOffset ();</span><br><span class="line">            <span class="keyword">byte</span>[] source = msg.array ();</span><br><span class="line">            <span class="keyword">int</span> length = source.length - offset;</span><br><span class="line">            <span class="keyword">final</span> String s = <span class="keyword">new</span> String (source, offset, length);</span><br><span class="line">            System.out.println (s);</span><br><span class="line">            <span class="comment">//feedback</span></span><br><span class="line">            <span class="comment">// 反馈服务器，向服务器提供已成功接收并应用于消费者的日志序列编号 （LSN）</span></span><br><span class="line">            stream.setAppliedLSN (stream.getLastReceiveLSN ());</span><br><span class="line">            stream.setFlushedLSN (stream.getLastReceiveLSN ());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>** 只针对指定表的逻辑复制 **</p><p> 步骤：</p><p>1。创建针对表创建订阅，及接收数据的操作类型 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> PUBLICATION YOUR_PUBLICATION_NAME) <span class="keyword">FOR</span> <span class="keyword">TABLE</span> YOUR_TABLE_NAME <span class="keyword">WITH</span> (publish = <span class="string">&#x27;insert,update,delete&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2。设置表同步数据的字段，最后 FULL 参数可变。</p><p> 参照官方文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy8xMC9zcWwtYWx0ZXJ0YWJsZS5odG1sI1NRTC1DUkVBVEVUQUJMRS1SRVBMSUNBLUlERU5USVRZ">https://www.postgresql.org/docs/10/sql-altertable.html#SQL-CREATETABLE-REPLICA-IDENTITY<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME REPLICA <span class="keyword">IDENTITY</span> <span class="keyword">FULL</span></span><br></pre></td></tr></table></figure><p>3。创建复制槽 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE_REPLICATION_SLOT  YOUR_SOLT_NAME  有效期  LOGICAL 解码插件名称；</span><br></pre></td></tr></table></figure><p>4。获取 PGReplicationStream，同上。</p><p> 详情参照官方文档地址：<span class="exturl" data-url="aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzExL3NxbC1jcmVhdGVwdWJsaWNhdGlvbi5odG1s">http://www.postgres.cn/docs/11/sql-createpublication.html<i class="fa fa-external-link-alt"></i></span></p><p> 解码插件可以参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RlYmV6aXVtL2RlYmV6aXVt">https://github.com/debezium/debezium<i class="fa fa-external-link-alt"></i></span></p><p> 完整代码可以查看： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYVl1VGlhbjExL3Bvc3RncmVzcWwtbWVzc2FnZQ==">https://github.com/xiaYuTian11/postgresql-message<i class="fa fa-external-link-alt"></i></span></p>]]></content>
      
      
      
        <tags>
            
            <tag> Postgresql </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
