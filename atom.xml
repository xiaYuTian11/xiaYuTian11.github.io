<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>SunnyDay</title>
  
  
  <link href="http://tanmw.top/atom.xml" rel="self"/>
  
  <link href="http://tanmw.top/"/>
  <updated>2021-03-11T13:24:48.605Z</updated>
  <id>http://tanmw.top/</id>
  
  <author>
    <name>SunnyDay</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>基于 freemarker 的代码生成器</title>
    <link href="http://tanmw.top/archives/407a3a38.html"/>
    <id>http://tanmw.top/archives/407a3a38.html</id>
    <published>2021-03-11T11:44:20.000Z</published>
    <updated>2021-03-11T13:24:48.605Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="# 概述" class="headerlink" title="概述"></a> 概述 </h2><p>​        最近在搭建新项目的时候，发现很多基础的业务代码都很相识，而基础的增删改查相信大家都写得很无趣，故参考 github，利用 freemarker 写了一个代码生成器，模版框架是 mybatis-plus, 只需要稍微改改模版就可以在其他工程里面使用了。</p><p>​    <a id="more"></a></p><p>​        代码生成器所生成的代码包括，controller,service,serviceImpl,api,mapper,xml,entity,dto,vo,converter<br>  以及单表的增删改查及列表查询 5 个接口。</p><p>​        ** 前提 **：有个可连接的数据库，里面有一张表，会基本的 JDBC 方式连接数据库并进行基础的查询，会制造 freemarker 模版；</p><h2 id="代码实现"><a href="# 代码实现" class="headerlink" title="代码实现"></a> 代码实现 </h2><p>pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.freemarker<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>freemarker<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.3.30<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.kingbase8<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jdbc42<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>8.2.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>cn.hutool<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>hutool-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">          <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.5.8<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CodeGenerateUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br><span class="line">277</span><br><span class="line">278</span><br><span class="line">279</span><br><span class="line">280</span><br><span class="line">281</span><br><span class="line">282</span><br><span class="line">283</span><br><span class="line">284</span><br><span class="line">285</span><br><span class="line">286</span><br><span class="line">287</span><br><span class="line">288</span><br><span class="line">289</span><br><span class="line">290</span><br><span class="line">291</span><br><span class="line">292</span><br><span class="line">293</span><br><span class="line">294</span><br><span class="line">295</span><br><span class="line">296</span><br><span class="line">297</span><br><span class="line">298</span><br><span class="line">299</span><br><span class="line">300</span><br><span class="line">301</span><br><span class="line">302</span><br><span class="line">303</span><br><span class="line">304</span><br><span class="line">305</span><br><span class="line">306</span><br><span class="line">307</span><br><span class="line">308</span><br><span class="line">309</span><br><span class="line">310</span><br><span class="line">311</span><br><span class="line">312</span><br><span class="line">313</span><br><span class="line">314</span><br><span class="line">315</span><br><span class="line">316</span><br><span class="line">317</span><br><span class="line">318</span><br><span class="line">319</span><br><span class="line">320</span><br><span class="line">321</span><br><span class="line">322</span><br><span class="line">323</span><br><span class="line">324</span><br><span class="line">325</span><br><span class="line">326</span><br><span class="line">327</span><br><span class="line">328</span><br><span class="line">329</span><br><span class="line">330</span><br><span class="line">331</span><br><span class="line">332</span><br><span class="line">333</span><br><span class="line">334</span><br><span class="line">335</span><br><span class="line">336</span><br><span class="line">337</span><br><span class="line">338</span><br><span class="line">339</span><br><span class="line">340</span><br><span class="line">341</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 代码生成器启动类 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> TMW</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/25 17:45</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CodeGenerateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String URL = <span class="string">&quot;jdbc:kingbase8://127.0.0.1:54321/FRONT?useUnicode=true&amp;characterEncoding=utf8&amp;useSSL=false&amp;serverTimezone=GMT%2B8&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String DRIVER = <span class="string">&quot;com.kingbase8.Driver&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USER = <span class="string">&quot;SYSTEM&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = <span class="string">&quot;123456&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String showTablesSql = <span class="string">&quot;select tablename from sys_tables WHERE \&quot;schemaname\&quot; = &#x27;PUBLIC&#x27;;&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String basePath = <span class="string">&quot;C:\\Users\\tmw\\Desktop\\test&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String basePackageName = <span class="string">&quot;com.zenith.front&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String AUTHOR = <span class="string">&quot;TMW&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String mapperXmlPath = <span class="string">&quot;mapper&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String daoPath = <span class="string">&quot;dao&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String dtoPath = <span class="string">&quot;domain/dto&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String voPath = <span class="string">&quot;domain/vo&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String entityPath = <span class="string">&quot;domain/entity&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String servicePath = <span class="string">&quot;api&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String serviceImplPath = <span class="string">&quot;service&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String controllerPath = <span class="string">&quot;controller&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String converterPath = <span class="string">&quot;converter&quot;</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> String modelPath = <span class="string">&quot;domain/entity&quot;</span>;</span><br><span class="line">    <span class="comment">// 优先 </span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; includeSet = <span class="keyword">new</span> HashSet&lt;String&gt;() &#123;&#123;</span><br><span class="line">        add (<span class="string">&quot;t_dct_info_group&quot;</span>);</span><br><span class="line">        add (<span class="string">&quot;t_dct_info_item&quot;</span>);</span><br><span class="line">        add (<span class="string">&quot;t_dct_info_set&quot;</span>);</span><br><span class="line">    &#125;&#125;;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Set&lt;String&gt; excludeSet = <span class="keyword">new</span> HashSet&lt;String&gt;() &#123;&#123;</span><br><span class="line">        <span class="comment">//add (&quot;String&quot;);</span></span><br><span class="line">    &#125;&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> List&lt;ColumnClass&gt; columnClassList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> String tableName;</span><br><span class="line">    <span class="keyword">private</span> String primaryKeyColumnName;</span><br><span class="line">    <span class="keyword">private</span> String changeTableName;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        CodeGenerateUtils codeGenerateUtils = <span class="keyword">new</span> CodeGenerateUtils ();</span><br><span class="line">        codeGenerateUtils.generate ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Connection <span class="title">getConnection</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Class.forName (DRIVER);</span><br><span class="line">        <span class="keyword">return</span> DriverManager.getConnection (URL, USER, PASSWORD);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">generate</span><span class="params">()</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Connection connection = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connection = getConnection ();</span><br><span class="line">            Set&lt;String&gt; tables = findTables (connection);</span><br><span class="line">            <span class="keyword">final</span> Set&lt;String&gt; lowerCaseSet = includeSet.stream ().map (String::toLowerCase).collect (Collectors.toSet ());</span><br><span class="line">            <span class="keyword">if</span> (lowerCaseSet.size () &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                tables = tables.stream ().filter (lowerCaseSet::contains).collect (Collectors.toSet ());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (excludeSet.size () &gt; <span class="number">0</span>) &#123;</span><br><span class="line">                tables = tables.stream ().filter (tableNameStr -&gt; !excludeSet.contains (tableNameStr)).collect (Collectors.toSet ());</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (tables.size () &lt; <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException (<span class="string">&quot; 未发现可生成表 & quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">for</span> (String tableNameStr : tables) &#123;</span><br><span class="line">                tableName = tableNameStr;</span><br><span class="line">                changeTableName = replaceUnderLineAndUpperCase (tableName);</span><br><span class="line">                columnClassList.clear ();</span><br><span class="line">                DatabaseMetaData databaseMetaData = connection.getMetaData ();</span><br><span class="line">                ResultSet resultSet = databaseMetaData.getColumns (<span class="keyword">null</span>, <span class="string">&quot;%&quot;</span>, tableName, <span class="string">&quot;%&quot;</span>);</span><br><span class="line">                <span class="keyword">final</span> ResultSet primaryKeys = databaseMetaData.getPrimaryKeys (<span class="keyword">null</span>, <span class="keyword">null</span>, tableName);</span><br><span class="line">                <span class="keyword">while</span> (primaryKeys.next ()) &#123;</span><br><span class="line">                    primaryKeyColumnName = primaryKeys.getString (<span class="string">&quot;COLUMN_NAME&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 生成 Mapper 文件 </span></span><br><span class="line">                generateMapperFile (resultSet);</span><br><span class="line">                <span class="comment">// 生成 Dao 文件 </span></span><br><span class="line">                generateDaoFile (resultSet);</span><br><span class="line">                <span class="comment">// 生成 Repository 文件 </span></span><br><span class="line">                <span class="comment">//generateRepositoryFile (resultSet);</span></span><br><span class="line">                <span class="comment">// 生成服务层接口文件 </span></span><br><span class="line">                generateServiceInterfaceFile (resultSet);</span><br><span class="line">                <span class="comment">// 生成服务实现层文件 </span></span><br><span class="line">                generateServiceImplFile (resultSet);</span><br><span class="line">                <span class="comment">// 生成 Controller 层文件 </span></span><br><span class="line">                generateControllerFile (resultSet);</span><br><span class="line">                <span class="comment">// 生成 DTO 文件 </span></span><br><span class="line">                generateDTOFile (resultSet);</span><br><span class="line">                <span class="comment">// 生成 ListDTO 文件 </span></span><br><span class="line">                generateListDTOFile (resultSet);</span><br><span class="line">                <span class="comment">// 生成 VO 文件 </span></span><br><span class="line">                generateVOFile (resultSet);</span><br><span class="line">                <span class="comment">// 生成 Model 文件 </span></span><br><span class="line">                generateModelFile (resultSet);</span><br><span class="line">                <span class="comment">// 生成 Converter 文件 </span></span><br><span class="line">                generateConverterFile (resultSet);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException (e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (connection != <span class="keyword">null</span>) &#123;</span><br><span class="line">                connection.close ();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Set&lt;String&gt; <span class="title">findTables</span><span class="params">(Connection connection)</span> <span class="keyword">throws</span> SQLException </span>&#123;</span><br><span class="line">        Set&lt;String&gt; set = <span class="keyword">new</span> HashSet&lt;&gt;();</span><br><span class="line">        PreparedStatement ps = connection.prepareStatement (showTablesSql);</span><br><span class="line">        <span class="keyword">final</span> ResultSet resultSet = ps.executeQuery ();</span><br><span class="line">        <span class="keyword">while</span> (resultSet.next ()) &#123;</span><br><span class="line">            <span class="keyword">final</span> String tableName = resultSet.getString (<span class="number">1</span>);</span><br><span class="line">            set.add (tableName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (set.size () &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException (<span class="string">&quot; 未在指定数据库中发现可用表！&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> set;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getCreatePath</span><span class="params">(String filePath, String suffix)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> basePath + File.separator + filePath + File.separator + changeTableName + suffix;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> String <span class="title">getSuffixPackageName</span><span class="params">(String packagePath)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (packagePath == <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> basePackageName;</span><br><span class="line">        &#125;</span><br><span class="line">        StringBuilder sb = <span class="keyword">new</span> StringBuilder ();</span><br><span class="line">        <span class="keyword">if</span> (packagePath.contains (<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">final</span> String [] split = packagePath.split (<span class="string">&quot;/&quot;</span>);</span><br><span class="line">            <span class="keyword">for</span> (String str : split) &#123;</span><br><span class="line">                sb.append (str).append (<span class="string">&quot;.&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> basePackageName + <span class="string">&quot;.&quot;</span> + sb.substring (<span class="number">0</span>, sb.length () - <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> basePackageName + <span class="string">&quot;.&quot;</span> + packagePath;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateModelFile</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String suffix = <span class="string">&quot;.java&quot;</span>;</span><br><span class="line">        String path = getCreatePath (modelPath, suffix);</span><br><span class="line">        <span class="keyword">final</span> String templateName = <span class="string">&quot;Model.ftl&quot;</span>;</span><br><span class="line">        File mapperFile = <span class="keyword">new</span> File (path);</span><br><span class="line">        <span class="keyword">this</span>.checkFilePath (mapperFile);</span><br><span class="line">        generateModelAndDTOAndVoFile (resultSet, templateName, mapperFile, modelPath);</span><br><span class="line">        System.out.println (<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 生成 &quot;</span> + changeTableName + <span class="string">&quot;.java 完成 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateModelAndDTOAndVoFile</span><span class="params">(ResultSet resultSet, String templateName, File createFile, String packageName)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (columnClassList.size () &lt; <span class="number">1</span>) &#123;</span><br><span class="line">            ColumnClass columnClass = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">while</span> (resultSet.next ()) &#123;</span><br><span class="line">                <span class="comment">//id 字段略过 </span></span><br><span class="line">                <span class="comment">//if (StrUtil.equalsAny (templateName, &quot;Model.ftl&quot;)) &#123;</span></span><br><span class="line">                <span class="comment">//     if (StrUtil.equalsAny (resultSet.getString (&quot;COLUMN_NAME&quot;), &quot;id&quot;, &quot;is_delete&quot;)) &#123;</span></span><br><span class="line">                <span class="comment">//         continue;</span></span><br><span class="line">                <span class="comment">//     &#125;</span></span><br><span class="line">                <span class="comment">// &#125;</span></span><br><span class="line">                columnClass = <span class="keyword">new</span> ColumnClass ();</span><br><span class="line">                <span class="comment">// 获取字段名称 </span></span><br><span class="line">                <span class="keyword">final</span> String columnName = resultSet.getString (<span class="string">&quot;COLUMN_NAME&quot;</span>);</span><br><span class="line">                columnClass.setColumnName (columnName);</span><br><span class="line">                <span class="comment">// 获取字段类型 </span></span><br><span class="line">                columnClass.setColumnType (resultSet.getString (<span class="string">&quot;TYPE_NAME&quot;</span>).toLowerCase ());</span><br><span class="line">                <span class="comment">// 转换字段名称，如 sys_name 变成 SysName</span></span><br><span class="line">                columnClass.setChangeColumnName (replaceUnderLineAndUpperCase (columnName));</span><br><span class="line">                <span class="comment">// 字段在数据库的注释 </span></span><br><span class="line">                columnClass.setColumnComment (resultSet.getString (<span class="string">&quot;REMARKS&quot;</span>));</span><br><span class="line">                columnClass.setPrimaryKey (StrUtil.equals (columnName, primaryKeyColumnName));</span><br><span class="line">                columnClassList.add (columnClass);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        List&lt;ColumnClass&gt; relColumnClassList;</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.equalsAny (templateName, <span class="string">&quot;Model.ftl&quot;</span>)) &#123;</span><br><span class="line">            relColumnClassList = columnClassList.stream ().filter (entity -&gt; !StrUtil.equalsAny (entity.getColumnName (), <span class="string">&quot;is_delete&quot;</span>))</span><br><span class="line">                    .collect (Collectors.toList ());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            relColumnClassList = <span class="keyword">new</span> ArrayList&lt;&gt;(columnClassList);</span><br><span class="line">        &#125;</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        dataMap.put (<span class="string">&quot;model_column&quot;</span>, relColumnClassList);</span><br><span class="line">        generateFileByTemplate (templateName, packageName, createFile, dataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateListDTOFile</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String suffix = <span class="string">&quot;ListDTO.java&quot;</span>;</span><br><span class="line">        String path = getCreatePath (dtoPath, suffix);</span><br><span class="line">        <span class="keyword">final</span> String templateName = <span class="string">&quot;ListDTO.ftl&quot;</span>;</span><br><span class="line">        File mapperFile = <span class="keyword">new</span> File (path);</span><br><span class="line">        <span class="keyword">this</span>.checkFilePath (mapperFile);</span><br><span class="line">        generateModelAndDTOAndVoFile (resultSet, templateName, mapperFile, dtoPath);</span><br><span class="line">        System.out.println (<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 生成 &quot;</span> + changeTableName + <span class="string">&quot;ListDTO.java 完成 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateVOFile</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String suffix = <span class="string">&quot;VO.java&quot;</span>;</span><br><span class="line">        String path = getCreatePath (voPath, suffix);</span><br><span class="line">        <span class="keyword">final</span> String templateName = <span class="string">&quot;VO.ftl&quot;</span>;</span><br><span class="line">        File mapperFile = <span class="keyword">new</span> File (path);</span><br><span class="line">        <span class="keyword">this</span>.checkFilePath (mapperFile);</span><br><span class="line">        generateModelAndDTOAndVoFile (resultSet, templateName, mapperFile, voPath);</span><br><span class="line">        System.out.println (<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 生成 &quot;</span> + changeTableName + <span class="string">&quot;VO.java 完成 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateDTOFile</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String suffix = <span class="string">&quot;DTO.java&quot;</span>;</span><br><span class="line">        String path = getCreatePath (dtoPath, suffix);</span><br><span class="line">        <span class="keyword">final</span> String templateName = <span class="string">&quot;DTO.ftl&quot;</span>;</span><br><span class="line">        File mapperFile = <span class="keyword">new</span> File (path);</span><br><span class="line">        <span class="keyword">this</span>.checkFilePath (mapperFile);</span><br><span class="line">        generateModelAndDTOAndVoFile (resultSet, templateName, mapperFile, dtoPath);</span><br><span class="line">        System.out.println (<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 生成 &quot;</span> + changeTableName + <span class="string">&quot;DTO.java 完成 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateConverterFile</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String suffix = <span class="string">&quot;Converter.java&quot;</span>;</span><br><span class="line">        String path = getCreatePath (converterPath, suffix);</span><br><span class="line">        <span class="keyword">final</span> String templateName = <span class="string">&quot;Converter.ftl&quot;</span>;</span><br><span class="line">        File mapperFile = <span class="keyword">new</span> File (path);</span><br><span class="line">        checkFilePath (mapperFile);</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        generateFileByTemplate (templateName, converterPath, mapperFile, dataMap);</span><br><span class="line">        System.out.println (<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 生成 &quot;</span> + changeTableName + <span class="string">&quot;Converter.java 完成 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateControllerFile</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String suffix = <span class="string">&quot;Controller.java&quot;</span>;</span><br><span class="line">        String path = getCreatePath (controllerPath, suffix);</span><br><span class="line">        <span class="keyword">final</span> String templateName = <span class="string">&quot;Controller.ftl&quot;</span>;</span><br><span class="line">        File mapperFile = <span class="keyword">new</span> File (path);</span><br><span class="line">        checkFilePath (mapperFile);</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        generateFileByTemplate (templateName, controllerPath, mapperFile, dataMap);</span><br><span class="line">        System.out.println (<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 生成 &quot;</span> + changeTableName + <span class="string">&quot;Controller.java 完成 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateServiceImplFile</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String suffix = <span class="string">&quot;ServiceImpl.java&quot;</span>;</span><br><span class="line">        String path = getCreatePath (serviceImplPath, suffix);</span><br><span class="line">        <span class="keyword">final</span> String templateName = <span class="string">&quot;ServiceImpl.ftl&quot;</span>;</span><br><span class="line">        File mapperFile = <span class="keyword">new</span> File (path);</span><br><span class="line">        checkFilePath (mapperFile);</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        generateFileByTemplate (templateName, serviceImplPath, mapperFile, dataMap);</span><br><span class="line">        System.out.println (<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 生成 &quot;</span> + changeTableName + <span class="string">&quot;ServiceImpl.java 完成 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateServiceInterfaceFile</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String suffix = <span class="string">&quot;Service.java&quot;</span>;</span><br><span class="line">        String path = getCreatePath (servicePath, suffix);</span><br><span class="line">        <span class="keyword">final</span> String templateName = <span class="string">&quot;Service.ftl&quot;</span>;</span><br><span class="line">        File mapperFile = <span class="keyword">new</span> File (path);</span><br><span class="line">        checkFilePath (mapperFile);</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        generateFileByTemplate (templateName, servicePath, mapperFile, dataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateRepositoryFile</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String suffix = <span class="string">&quot;Repository.java&quot;</span>;</span><br><span class="line">        <span class="keyword">final</span> String path = basePath + changeTableName + suffix;</span><br><span class="line">        <span class="keyword">final</span> String templateName = <span class="string">&quot;Repository.ftl&quot;</span>;</span><br><span class="line">        File mapperFile = <span class="keyword">new</span> File (path);</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        generateFileByTemplate (templateName, mapperFile, dataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Mapper.java</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateDaoFile</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String suffix = <span class="string">&quot;Mapper.java&quot;</span>;</span><br><span class="line">        String path = getCreatePath (daoPath, suffix);</span><br><span class="line">        <span class="keyword">final</span> String templateName = <span class="string">&quot;Mapper.ftl&quot;</span>;</span><br><span class="line">        File mapperFile = <span class="keyword">new</span> File (path);</span><br><span class="line">        checkFilePath (mapperFile);</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        generateFileByTemplate (templateName, daoPath, mapperFile, dataMap);</span><br><span class="line">        System.out.println (<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 生成 &quot;</span> + changeTableName + <span class="string">&quot;Mapper.java 完成 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Mapper.xml</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateMapperFile</span><span class="params">(ResultSet resultSet)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">final</span> String suffix = <span class="string">&quot;Mapper.xml&quot;</span>;</span><br><span class="line">        String path = getCreatePath (mapperXmlPath, suffix);</span><br><span class="line">        <span class="keyword">final</span> String templateName = <span class="string">&quot;Mapper.xml.ftl&quot;</span>;</span><br><span class="line">        File mapperFile = <span class="keyword">new</span> File (path);</span><br><span class="line">        checkFilePath (mapperFile);</span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">        generateFileByTemplate (templateName, mapperFile, dataMap);</span><br><span class="line">        System.out.println (<span class="string">&quot;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; 生成 &quot;</span> + changeTableName + <span class="string">&quot;Mapper.xml 完成 &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateFileByTemplate</span><span class="params">(<span class="keyword">final</span> String templateName, File file, Map&lt;String, Object&gt; dataMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.generateFileByTemplate (templateName, <span class="keyword">null</span>, file, dataMap);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">generateFileByTemplate</span><span class="params">(<span class="keyword">final</span> String templateName, String packagePath, File file, Map&lt;String, Object&gt; dataMap)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        Template template = FreeMarkerTemplateUtils.getTemplate (templateName);</span><br><span class="line">        FileOutputStream fos = <span class="keyword">new</span> FileOutputStream (file);</span><br><span class="line">        dataMap.put (<span class="string">&quot;serialVersionUID&quot;</span>, getSerialVersionUID ());</span><br><span class="line">        dataMap.put (<span class="string">&quot;table_name_small&quot;</span>, tableName);</span><br><span class="line">        dataMap.put (<span class="string">&quot;table_name&quot;</span>, changeTableName);</span><br><span class="line">        dataMap.put (<span class="string">&quot;lower_table_name&quot;</span>, StrUtil.lowerFirst (changeTableName));</span><br><span class="line">        dataMap.put (<span class="string">&quot;author&quot;</span>, AUTHOR);</span><br><span class="line">        dataMap.put (<span class="string">&quot;date&quot;</span>, DateUtil.formatDateTime (<span class="keyword">new</span> Date ()));</span><br><span class="line">        dataMap.put (<span class="string">&quot;dto_package_name&quot;</span>, getSuffixPackageName (dtoPath));</span><br><span class="line">        dataMap.put (<span class="string">&quot;vo_package_name&quot;</span>, getSuffixPackageName (voPath));</span><br><span class="line">        dataMap.put (<span class="string">&quot;entity_package_name&quot;</span>, getSuffixPackageName (entityPath));</span><br><span class="line">        dataMap.put (<span class="string">&quot;package_name&quot;</span>, getSuffixPackageName (packagePath));</span><br><span class="line">        dataMap.put (<span class="string">&quot;api_package_name&quot;</span>, getSuffixPackageName (servicePath));</span><br><span class="line">        dataMap.put (<span class="string">&quot;service_package_name&quot;</span>, getSuffixPackageName (serviceImplPath));</span><br><span class="line">        dataMap.put (<span class="string">&quot;converter_package_name&quot;</span>, getSuffixPackageName (converterPath));</span><br><span class="line">        dataMap.put (<span class="string">&quot;dao_package_name&quot;</span>, getSuffixPackageName (daoPath));</span><br><span class="line">        <span class="comment">//dataMap.put (&quot;table_annotation&quot;, tableAnnotation);</span></span><br><span class="line">        Writer out = <span class="keyword">new</span> BufferedWriter (<span class="keyword">new</span> OutputStreamWriter (fos, StandardCharsets.UTF_8), <span class="number">10240</span>);</span><br><span class="line">        template.process (dataMap, out);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">checkFilePath</span><span class="params">(File file)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!file.exists ()) &#123;</span><br><span class="line">            file.getParentFile ().mkdirs ();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 生成 serialVersionUID</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">protected</span> String <span class="title">getSerialVersionUID</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> String.valueOf (Math.abs (UUID.randomUUID ().getMostSignificantBits ())) + <span class="string">&quot;L&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">replaceUnderLineAndUpperCase</span><span class="params">(String str)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> StrUtil.upperFirst (StrUtil.toCamelCase (str));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>ColumnClass.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 数据库字段封装类 </span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> TMW</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/26 14:55</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColumnClass</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库字段名称 </span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String columnName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库字段类型 </span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String columnType;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库字段首字母小写且去掉下划线字符串 </span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String changeColumnName;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据库字段注释 </span></span><br><span class="line"><span class="comment">     **/</span></span><br><span class="line">    <span class="keyword">private</span> String columnComment;</span><br><span class="line">    <span class="comment">/***</span></span><br><span class="line"><span class="comment">     * 数据库主键 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">boolean</span> primaryKey;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isPrimaryKey</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> primaryKey;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ColumnClass <span class="title">setPrimaryKey</span><span class="params">(<span class="keyword">boolean</span> primaryKey)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.primaryKey = primaryKey;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColumnComment</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> columnComment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColumnComment</span><span class="params">(String columnComment)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.columnComment = columnComment;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColumnName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> columnName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColumnName</span><span class="params">(String columnName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.columnName = columnName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getColumnType</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> columnType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColumnType</span><span class="params">(String columnType)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.columnType = columnType;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getChangeColumnName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> changeColumnName;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setChangeColumnName</span><span class="params">(String changeColumnName)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.changeColumnName = changeColumnName;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>FreeMarkerTemplateUtils.java</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> freemarker.cache.ClassTemplateLoader;</span><br><span class="line"><span class="keyword">import</span> freemarker.cache.NullCacheStorage;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Configuration;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.Template;</span><br><span class="line"><span class="keyword">import</span> freemarker.template.TemplateExceptionHandler;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> TMW</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2021/2/26 14:54</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">FreeMarkerTemplateUtils</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="title">FreeMarkerTemplateUtils</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Configuration CONFIGURATION = <span class="keyword">new</span> Configuration (Configuration.VERSION_2_3_30);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span>&#123;</span><br><span class="line">        <span class="comment">// 这里比较重要，用来指定加载模板所在的路径 </span></span><br><span class="line">        CONFIGURATION.setTemplateLoader (<span class="keyword">new</span> ClassTemplateLoader (FreeMarkerTemplateUtils.class, &quot;/templates&quot;));</span><br><span class="line">        CONFIGURATION.setDefaultEncoding (<span class="string">&quot;UTF-8&quot;</span>);</span><br><span class="line">        CONFIGURATION.setTemplateExceptionHandler (TemplateExceptionHandler.RETHROW_HANDLER);</span><br><span class="line">        CONFIGURATION.setCacheStorage (NullCacheStorage.INSTANCE);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Template <span class="title">getTemplate</span><span class="params">(String templateName)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> CONFIGURATION.getTemplate (templateName);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">clearCache</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        CONFIGURATION.clearTemplateCache ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="模版"><a href="# 模版" class="headerlink" title="模版"></a> 模版 </h2><p>Model.ftl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;package_name&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.baomidou.mybatisplus.annotation.*;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.Serializable;</span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> $&#123;author&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> $&#123;date&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@TableName (&quot;$&#123;table_name_small&#125;&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;table_name&#125; implements Serializable &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = $&#123;serialVersionUID&#125;;</span><br><span class="line"></span><br><span class="line">&lt;#if model_column??&gt;</span><br><span class="line">    &lt;#list model_column as model&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *$&#123;model.columnComment!&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">&lt;#if (model.primaryKey = true)&gt;</span><br><span class="line">    <span class="meta">@TableId (&quot;$&#123;model.columnName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String $&#123;model.changeColumnName?uncap_first&#125;;</span><br><span class="line">&lt;#else&gt;</span><br><span class="line">    <span class="meta">@TableField (&quot;$&#123;model.columnName&#125;&quot;)</span></span><br><span class="line">    &lt;#if (model.columnType = &#x27;varchar&#x27; || model.columnType = &#x27;text&#x27;)&gt;</span><br><span class="line">    <span class="keyword">private</span> String $&#123;model.changeColumnName?uncap_first&#125;;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">    &lt;#if model.columnType = &#x27;timestamp&#x27; &gt;</span><br><span class="line">    <span class="keyword">private</span> Date $&#123;model.changeColumnName?uncap_first&#125;;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">    &lt;#if model.columnType = &#x27;smallint&#x27; || model.columnType = &#x27;int2&#x27;&gt;</span><br><span class="line">    <span class="keyword">private</span> Integer $&#123;model.changeColumnName?uncap_first&#125;;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line">    &lt;/#list&gt;</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@TableLogic</span></span><br><span class="line">    <span class="meta">@TableField (value = &quot;is_delete&quot;, fill = FieldFill.INSERT)</span></span><br><span class="line">    <span class="keyword">private</span> Integer isDelete;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>VO.ftl</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> $&#123;package_name&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> lombok.EqualsAndHashCode;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Date;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* <span class="doctag">@author</span> $&#123;author&#125;</span></span><br><span class="line"><span class="comment">* <span class="doctag">@date</span> $&#123;date&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@EqualsAndHashCode (callSuper = true)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> $</span>&#123;table_name&#125;VO extends BaseVO &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">long</span> serialVersionUID = $&#123;serialVersionUID&#125;;</span><br><span class="line"></span><br><span class="line">&lt;#if model_column??&gt;</span><br><span class="line">&lt;#list model_column as model&gt;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    *$&#123;model.columnComment!&#125;</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    &lt;#if (model.columnType = &#x27;BIGINT&#x27; || model.columnType = &#x27;int8&#x27;)&gt;</span><br><span class="line">    <span class="keyword">private</span> Long $&#123;model.changeColumnName?uncap_first&#125;;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">    &lt;#if (model.columnType = &#x27;varchar&#x27; || model.columnType = &#x27;text&#x27;)&gt;</span><br><span class="line">    <span class="keyword">private</span> String $&#123;model.changeColumnName?uncap_first&#125;;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">    &lt;#if model.columnType = &#x27;timestamp&#x27; &gt;</span><br><span class="line">    <span class="keyword">private</span> Date $&#123;model.changeColumnName?uncap_first&#125;;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">    &lt;#if model.columnType = &#x27;smallint&#x27; || model.columnType = &#x27;int2&#x27;&gt;</span><br><span class="line">    <span class="keyword">private</span> Integer $&#123;model.changeColumnName?uncap_first&#125;;</span><br><span class="line">    &lt;/#if&gt;</span><br><span class="line">&lt;/#list&gt;</span><br><span class="line">&lt;/#if&gt;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>​        模版就贴两个仅供参考，由于时间仓促，代码就没有一键生成到对应的包下面，只有自己稍微调整下路径实现即可；</p><p> 源码地址含本工程全部模版文件：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYVl1VGlhbjExL2ZyZWVtYXJrZXItZ2VuZXJhdG9y">https://github.com/xiaYuTian11/freemarker-generator<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;​        最近在搭建新项目的时候，发现很多基础的业务代码都很相识，而基础的增删改查相信大家都写得很无趣，故参考 github，利用 freemarker 写了一个代码生成器，模版框架是 mybatis-plus, 只需要稍微改改模版就可以在其他工程里面使用了。&lt;/p&gt;
&lt;p&gt;​</summary>
    
    
    
    
    <category term="freemarker" scheme="http://tanmw.top/tags/freemarker/"/>
    
    <category term="代码生成器" scheme="http://tanmw.top/tags/%E4%BB%A3%E7%A0%81%E7%94%9F%E6%88%90%E5%99%A8/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL 数据备份还原与远程拷贝</title>
    <link href="http://tanmw.top/archives/2e20b53e.html"/>
    <id>http://tanmw.top/archives/2e20b53e.html</id>
    <published>2020-11-26T11:54:00.000Z</published>
    <updated>2020-11-26T14:25:32.479Z</updated>
    
    <content type="html"><![CDATA[<p>​    PostgreSQL 数据库备份与还原命令。</p><p>​    文件远程服务器拷贝到本地与本地拷贝到远程服务器命令。</p><a id="more"></a><h2 id="PostgreSQL"><a href="#PostgreSQL" class="headerlink" title="PostgreSQL"></a>PostgreSQL</h2><p>​        postgresql 默认管理员账户是 postgres，利用该账户进入数据库进行操作 </p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su postgres</span><br></pre></td></tr></table></figure><h3 id="pg-dump"><a href="#pg-dump" class="headerlink" title="pg_dump"></a>pg_dump</h3><p>​    pg_dump 把一个数据库转储为纯文本文件或者是其它格式。</p><p>​    语法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_dump [选项]... [数据库名字]</span><br></pre></td></tr></table></figure><p> 参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"> 一般选项：</span><br><span class="line"></span><br><span class="line">-f,  --file=FILENAME          输出文件或目录名 </span><br><span class="line">-F,  --format=c|d|t|p         输出文件格式 (定制，目录，tar)</span><br><span class="line">                           明文 (默认值))</span><br><span class="line">-j,  --<span class="built_in">jobs</span>=NUM               执行多个并行任务进行备份转储工作 </span><br><span class="line">-v,  --verbose                详细模式 </span><br><span class="line">-V,  --version                输出版本信息，然后退出 </span><br><span class="line">-Z,  --compress=0-9           被压缩格式的压缩级别 </span><br><span class="line">--lock-wait-timeout=TIMEOUT  在等待表锁超时后操作失败 </span><br><span class="line">--no-sync                    <span class="keyword">do</span> not <span class="built_in">wait</span> <span class="keyword">for</span> changes to be written safely to disk</span><br><span class="line">-?,  --<span class="built_in">help</span>                   显示此帮助，然后退出 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 控制输出内容选项：</span><br><span class="line"></span><br><span class="line">-a, --data-only              只转储数据，不包括模式 </span><br><span class="line">-b, --blobs                  在转储中包括大对象 </span><br><span class="line">-B, --no-blobs               exclude large objects <span class="keyword">in</span> dump</span><br><span class="line">-c, --clean                  在重新创建之前，先清除（删除）数据库对象 </span><br><span class="line">-C, --create                 在转储中包括命令，以便创建数据库 </span><br><span class="line">-E, --encoding=ENCODING      转储以 ENCODING 形式编码的数据 </span><br><span class="line">-n, --schema=SCHEMA          只转储指定名称的模式 </span><br><span class="line">-N, --exclude-schema=SCHEMA  不转储已命名的模式 </span><br><span class="line">-o, --oids                   在转储中包括 OID</span><br><span class="line">-O, --no-owner               在明文格式中，忽略恢复对象所属者 </span><br><span class="line"></span><br><span class="line">-s, --schema-only            只转储模式，不包括数据 </span><br><span class="line">-S, --superuser=NAME         在明文格式中使用指定的超级用户名 </span><br><span class="line">-t, --table=TABLE            只转储指定名称的表 </span><br><span class="line">-T, --exclude-table=TABLE    不转储指定名称的表 </span><br><span class="line">-x, --no-privileges          不要转储权限 (grant/revoke)</span><br><span class="line">--binary-upgrade             只能由升级工具使用 </span><br><span class="line">--column-inserts             以带有列名的 INSERT 命令形式转储数据 </span><br><span class="line">--<span class="built_in">disable</span>-dollar-quoting     取消美元 (符号) 引号，使用 SQL 标准引号 </span><br><span class="line">--<span class="built_in">disable</span>-triggers           在只恢复数据的过程中禁用触发器 </span><br><span class="line">--<span class="built_in">enable</span>-row-security        启用行安全性（只转储用户能够访问的内容）</span><br><span class="line">--exclude-table-data=TABLE   不转储指定名称的表中的数据 </span><br><span class="line">--<span class="keyword">if</span>-exists              当删除对象时使用 IF EXISTS</span><br><span class="line">--inserts                    以 INSERT 命令，而不是 COPY 命令的形式转储数据 </span><br><span class="line">--no-publications            <span class="keyword">do</span> not dump publications</span><br><span class="line">--no-security-labels         不转储安全标签的分配 </span><br><span class="line">--no-subscriptions           <span class="keyword">do</span> not dump subscriptions</span><br><span class="line">--no-synchronized-snapshots  在并行工作集中不使用同步快照 </span><br><span class="line">--no-tablespaces             不转储表空间分配信息 </span><br><span class="line">--no-unlogged-table-data     不转储没有日志的表数据 </span><br><span class="line">--quote-all-identifiers      所有标识符加引号，即使不是关键字 </span><br><span class="line">--section=SECTION            备份命名的节 (数据前，数据，及 数据后)</span><br><span class="line">--serializable-deferrable   等到备份可以无异常运行 </span><br><span class="line">--snapshot=SNAPSHOT          为转储使用给定的快照 </span><br><span class="line">--strict-names               要求每个表和 / 或 schema 包括模式以匹配至少一个实体 </span><br><span class="line">--use-set-session-authorization 使用 SESSION AUTHORIZATION 命令代替 ALTER OWNER 命令来设置所有权 </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"> 联接选项：</span><br><span class="line"></span><br><span class="line">-d, --dbname=DBNAME       对数据库 DBNAME 备份 </span><br><span class="line">-h, --host = 主机名        数据库服务器的主机名或套接字目录 </span><br><span class="line">-p, --port = 端口号        数据库服务器的端口号 </span><br><span class="line">-U, --username = 名字      以指定的数据库用户联接 </span><br><span class="line">-w, --no-password        永远不提示输入口令 </span><br><span class="line">-W, --password           强制口令提示 (自动)</span><br><span class="line">--role=ROLENAME          在转储前运行 SET ROLE</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 用 psql 还原 </span></span><br><span class="line">pg_dump -d [数据库名称] -Oxvf [路径 / 文件名。扩展名]</span><br><span class="line"><span class="comment"># 用 pg_restore 还原 </span></span><br><span class="line">pg_dump -Fc -f [路径 / 文件名。扩展名] [数据库名称]</span><br></pre></td></tr></table></figure><h3 id="psql"><a href="#psql" class="headerlink" title="psql"></a>psql</h3><p>​    psql 是 PostgreSQL 的交互式客户端工具。</p><p> 语法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">psql [选项]... [数据库名称 [ 用户名称]]</span><br></pre></td></tr></table></figure><p> 参数:</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"> 通用选项：</span><br><span class="line"></span><br><span class="line">-c,--<span class="built_in">command</span>= 命令        执行单一命令 (SQL 或内部指令) 然后结束 </span><br><span class="line">-d, --dbname = 数据库名称   指定要连接的数据库 (默认：<span class="string">&quot;l1xnan&quot;</span>)</span><br><span class="line">-f, --file = 文件名      从文件中执行命令然后退出 </span><br><span class="line">-l, --list             列出所有可用的数据库，然后退出 </span><br><span class="line">-v, --<span class="built_in">set</span>=, --variable=NAME=VALUE</span><br><span class="line">                       设置 psql 变量 NAME 为 VALUE</span><br><span class="line">                       (例如，-v ON_ERROR_STOP=1)</span><br><span class="line">-V, --version            输出版本信息，然后退出 </span><br><span class="line">-X, --no-psqlrc         不读取启动文档 (~/.psqlrc)</span><br><span class="line">-1 (<span class="string">&quot;one&quot;</span>), --single-transaction</span><br><span class="line">                      作为一个单一事务来执行命令文件 (如果是非交互型的)</span><br><span class="line">-?, --<span class="built_in">help</span>[=options]     显示此帮助，然后退出 </span><br><span class="line">--<span class="built_in">help</span>=commands      列出反斜线命令，然后退出 </span><br><span class="line">--<span class="built_in">help</span>=variables     列出特殊变量，然后退出 </span><br><span class="line"></span><br><span class="line"> 输入和输出选项：</span><br><span class="line"></span><br><span class="line">-a, --<span class="built_in">echo</span>-all          显示所有来自于脚本的输入 </span><br><span class="line">-b, --<span class="built_in">echo</span>-errors        回显失败的命令 </span><br><span class="line">-e, --<span class="built_in">echo</span>-queries      显示发送给服务器的命令 </span><br><span class="line">-E, --<span class="built_in">echo</span>-hidden        显示内部命令产生的查询 </span><br><span class="line">-L, --<span class="built_in">log</span>-file = 文件名  将会话日志写入文件 </span><br><span class="line">-n, --no-readline       禁用增强命令行编辑功能 (readline)</span><br><span class="line">-o, --output=FILENAME 将查询结果写入文件 (或 | 管道)</span><br><span class="line">-q, --quiet             以沉默模式运行 (不显示消息，只有查询结果)</span><br><span class="line">-s, --single-step       单步模式 (确认每个查询)</span><br><span class="line">-S, --single-line        单行模式 (一行就是一条 SQL 命令)</span><br><span class="line"></span><br><span class="line"> 输出格式选项：</span><br><span class="line"></span><br><span class="line">-A, --no-align           使用非对齐表格输出模式 </span><br><span class="line">-F, --field-separator=STRING</span><br><span class="line">         为字段设置分隔符，用于不整齐的输出 (默认：<span class="string">&quot;|&quot;</span>)</span><br><span class="line">-H, --html             HTML 表格输出模式 </span><br><span class="line">-P, --pset = 变量 [= 参数]    设置将变量打印到参数的选项 (查阅 \pset 命令)</span><br><span class="line">-R, --record-separator=STRING</span><br><span class="line">         为不整齐的输出设置字录的分隔符 (默认：换行符号)</span><br><span class="line">-t, --tuples-only      只打印记录 i</span><br><span class="line">-T, --table-attr = 文本   设定 HTML 表格标记属性（例如，宽度，边界 )</span><br><span class="line">-x, --expanded           打开扩展表格输出 </span><br><span class="line">-z, --field-separator-zero</span><br><span class="line">                       为不整齐的输出设置字段分隔符为字节 0</span><br><span class="line">-0, --record-separator-zero</span><br><span class="line">                       为不整齐的输出设置记录分隔符为字节 0</span><br><span class="line"></span><br><span class="line"> 联接选项：</span><br><span class="line"></span><br><span class="line">-h, --host = 主机名        数据库服务器主机或 socket 目录 (默认：<span class="string">&quot; 本地接口 & quot;</span>)</span><br><span class="line">-p, --port = 端口        数据库服务器的端口 (默认：<span class="string">&quot;5432&quot;</span>)</span><br><span class="line">-U, --username = 用户名    指定数据库用户名 (默认：<span class="string">&quot;l1xnan&quot;</span>)</span><br><span class="line">-w, --no-password       永远不提示输入口令 </span><br><span class="line">-W, --password           强制口令提示 (自动)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 需要新进行还原的数据库新建 </span></span><br><span class="line">psql -d [还原的数据库名称] -abef [备份数据库路径及文件名]</span><br></pre></td></tr></table></figure><h3 id="pg-restore"><a href="#pg-restore" class="headerlink" title="pg_restore"></a>pg_restore</h3><p>​    pg_restore 从一个归档中恢复一个由 pg_dump 创建的 PostgreSQL 数据库。</p><p> 语法：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_restore [选项]... [文件名]</span><br></pre></td></tr></table></figure><p> 参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"> 一般选项：</span><br><span class="line"></span><br><span class="line">-d, --dbname = 名字        连接数据库名字 </span><br><span class="line">-f, --file = 文件名        输出文件名 </span><br><span class="line">-F, --format=c|d|t       备份文件格式 (应该自动进行)</span><br><span class="line">-l, --list               打印归档文件的 TOC 概述 </span><br><span class="line">-v, --verbose            详细模式 </span><br><span class="line">-V, --version            输出版本信息，然后退出 </span><br><span class="line">-?, --<span class="built_in">help</span>               显示此帮助，然后退出 </span><br><span class="line"></span><br><span class="line"> 恢复控制选项：</span><br><span class="line"></span><br><span class="line">-a, --data-only             只恢复数据，不包括模式 </span><br><span class="line">-c, --clean                  在重新创建之前，先清除（删除）数据库对象 </span><br><span class="line">-C, --create                 创建目标数据库 </span><br><span class="line">-e, --<span class="built_in">exit</span>-on-error          发生错误退出，默认为继续 </span><br><span class="line">-I, --index=NAME             恢复指定名称的索引 </span><br><span class="line">-j, --<span class="built_in">jobs</span>=NUM               执行多个并行任务进行恢复工作 </span><br><span class="line">-L, --use-list=FILENAME      从这个文件中使用指定的内容表排序 </span><br><span class="line">                            输出 </span><br><span class="line">-n, --schema=NAME            在这个模式中只恢复对象 </span><br><span class="line">-N, --exclude-schema=NAME    <span class="keyword">do</span> not restore objects <span class="keyword">in</span> this schema</span><br><span class="line">-O, --no-owner               不恢复对象所属者 </span><br><span class="line">-P, --<span class="keyword">function</span>=NAME (args)    恢复指定名字的函数 </span><br><span class="line">-s, --schema-only           只恢复模式，不包括数据 </span><br><span class="line">-S, --superuser=NAME         使用指定的超级用户来禁用触发器 </span><br><span class="line">-t, --table=NAME             restore named relation (table, view, etc.)</span><br><span class="line">-T, --trigger=NAME          恢复指定名字的触发器 </span><br><span class="line">-x, --no-privileges          跳过处理权限的恢复 (grant/revoke)</span><br><span class="line">-1, --single-transaction     作为单个事务恢复 </span><br><span class="line">--<span class="built_in">disable</span>-triggers           在只恢复数据的过程中禁用触发器 </span><br><span class="line">--<span class="built_in">enable</span>-row-security        启用行安全性 </span><br><span class="line">--<span class="keyword">if</span>-exists              当删除对象时使用 IF EXISTS</span><br><span class="line">--no-data-for-failed-tables  对那些无法创建的表不进行 </span><br><span class="line">                            数据恢复 </span><br><span class="line">--no-publications            <span class="keyword">do</span> not restore publications</span><br><span class="line">--no-security-labels         不恢复安全标签信息 </span><br><span class="line">--no-subscriptions           <span class="keyword">do</span> not restore subscriptions</span><br><span class="line">--no-tablespaces             不恢复表空间的分配信息 </span><br><span class="line">--section=SECTION            恢复命名节 (数据前、数据及数据后)</span><br><span class="line">--strict-names               要求每个表和 / 或 schema 包括模式以匹配至少一个实体 </span><br><span class="line">--use-set-session-authorization    使用 SESSION AUTHORIZATION 命令代替 ALTER OWNER 命令来设置所有权 </span><br><span class="line"></span><br><span class="line"> 联接选项：</span><br><span class="line"></span><br><span class="line">-h, --host = 主机名        数据库服务器的主机名或套接字目录 </span><br><span class="line">-p, --port = 端口号        数据库服务器的端口号 </span><br><span class="line">-U, --username = 名字      以指定的数据库用户联接 </span><br><span class="line">-w, --no-password        永远不提示输入口令 </span><br><span class="line">-W, --password           强制口令提示 (自动)</span><br><span class="line">--role=ROLENAME          在恢复前执行 SET ROLE 操作 </span><br><span class="line"></span><br><span class="line"> 选项 -I, -n, -P, -t, -T, 以及 --section 可以组合使用和指定多次用于选择多个对象.</span><br><span class="line"></span><br></pre></td></tr></table></figure><p> 如果没有提供输入文件名，则使用标准输入。</p><p> 例子：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pg_restore -d [数据库名称] [备份数据库路径及文件名]</span><br></pre></td></tr></table></figure><h2 id="scp- 远程拷贝"><a href="#scp- 远程拷贝" class="headerlink" title="scp 远程拷贝"></a>scp 远程拷贝 </h2><p>​    scp 是 secure copy 的简写，用于在 Linux 下进行远程拷贝文件的命令，和它类似的命令有 cp，不过 cp 只是在本机进行拷贝不能跨服务器，而且 scp 传输是加密的。当你服务器硬盘变为只读 read only system 时，用 scp 可以帮你把文件移出来。</p><blockquote><p> 类似的工具有 rsync；scp 消耗资源少，不会提高多少系统负荷，在这一点上，rsync 就远远不及它了。rsync 比 scp 会快一点，但当小文件多的情况下，rsync 会导致硬盘 I/O 非常高，而 scp 基本不影响系统正常使用。</p></blockquote><p> 命令格式：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp [参数] [原路径] [目标路径]</span><br></pre></td></tr></table></figure><p> 参数：</p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">-1 强制 scp 命令使用协议 ssh1</span><br><span class="line">-2 强制 scp 命令使用协议 ssh2</span><br><span class="line">-4 强制 scp 命令只使用 IPv4 寻址 </span><br><span class="line">-6 强制 scp 命令只使用 IPv6 寻址 </span><br><span class="line">-B 使用批处理模式（传输过程中不询问传输口令或短语）</span><br><span class="line">-C 允许压缩。（将 - C 标志传递给 ssh，从而打开压缩功能）</span><br><span class="line">-p 留原文件的修改时间，访问时间和访问权限。</span><br><span class="line">-q 不显示传输进度条。</span><br><span class="line">-r 递归复制整个目录。</span><br><span class="line">-v 详细方式显示输出。scp 和 ssh (1) 会显示出整个过程的调试信息。这些信息用于调试连接，验证和配置问题。</span><br><span class="line">-c cipher 以 cipher 将数据传输进行加密，这个选项将直接传递给 ssh。</span><br><span class="line">-F ssh_config 指定一个替代的 ssh 配置文件，此参数直接传递给 ssh。</span><br><span class="line">-i identity_file 从指定文件中读取传输时使用的密钥文件，此参数直接传递给 ssh。</span><br><span class="line">-l <span class="built_in">limit</span> 限定用户所能使用的带宽，以 Kbit/s 为单位。</span><br><span class="line">-o ssh_option 如果习惯于使用 ssh_config (5) 中的参数传递方式，</span><br><span class="line">-P port 注意是大写的 P, port 是指定数据传输用到的端口号 </span><br><span class="line">-S program 指定加密传输时所使用的程序。此程序必须能够理解 ssh (1) 的选项。</span><br></pre></td></tr></table></figure><p> 例子：</p><h3 id="1- 从远处复制文件到本地目录"><a href="#1- 从远处复制文件到本地目录" class="headerlink" title="1. 从远处复制文件到本地目录"></a>1. 从远处复制文件到本地目录 </h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 192.168.119.111 机器上的 /tmp/test.sql 文件到本地 ./ 目录中 </span></span><br><span class="line">scp root@192.168.119.111:/tmp/test.sql ./</span><br></pre></td></tr></table></figure><h3 id="2- 从远处复制目录到本地"><a href="#2- 从远处复制目录到本地" class="headerlink" title="2. 从远处复制目录到本地"></a>2. 从远处复制目录到本地 </h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 从 192.168.119.111 机器上的 /tmp/ 目录递归到本地 ./ 目录中 </span></span><br><span class="line">scp -r root@192.168.119.111:/tmp/./</span><br></pre></td></tr></table></figure><h3 id="3- 上传本地文件到远程机器指定目录"><a href="#3- 上传本地文件到远程机器指定目录" class="headerlink" title="3. 上传本地文件到远程机器指定目录"></a>3. 上传本地文件到远程机器指定目录 </h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地 test.sql 文件拷贝到 192.168.119.111 机器上的 /tmp/ 下并重命名为 test01.sql</span></span><br><span class="line">scp test.sql root@192.168.119.111:/tmp/test01.sql</span><br></pre></td></tr></table></figure><h3 id="4- 上传本地目录到远程机器指定目录"><a href="#4- 上传本地目录到远程机器指定目录" class="headerlink" title="4. 上传本地目录到远程机器指定目录"></a>4. 上传本地目录到远程机器指定目录 </h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 将本地 touchpad_ELANTECH_13.6.10.2_W10x64 文件夹递归拷贝到 192.168.119.111 机器上的 /tmp/</span></span><br><span class="line">scp -r touchpad_ELANTECH_13.6.10.2_W10x64\ root@192.168.119.111:/tmp</span><br></pre></td></tr></table></figure><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 登录服务器查看拷贝情况 </span></span><br><span class="line">ssh root@192.168.119.111</span><br></pre></td></tr></table></figure>]]></content>
    
    
    <summary type="html">&lt;p&gt;​    PostgreSQL 数据库备份与还原命令。&lt;/p&gt;
&lt;p&gt;​    文件远程服务器拷贝到本地与本地拷贝到远程服务器命令。&lt;/p&gt;</summary>
    
    
    
    
    <category term="PostgreSQL" scheme="http://tanmw.top/tags/PostgreSQL/"/>
    
    <category term="Linux" scheme="http://tanmw.top/tags/Linux/"/>
    
    <category term="远程拷贝，备份，还原，dump" scheme="http://tanmw.top/tags/%E8%BF%9C%E7%A8%8B%E6%8B%B7%E8%B4%9D%EF%BC%8C%E5%A4%87%E4%BB%BD%EF%BC%8C%E8%BF%98%E5%8E%9F%EF%BC%8Cdump/"/>
    
    <category term="ssh" scheme="http://tanmw.top/tags/ssh/"/>
    
    <category term="scp" scheme="http://tanmw.top/tags/scp/"/>
    
  </entry>
  
  <entry>
    <title>Git 项目初始化并提交远程仓库</title>
    <link href="http://tanmw.top/archives/456ca0f7.html"/>
    <id>http://tanmw.top/archives/456ca0f7.html</id>
    <published>2020-11-18T09:20:49.000Z</published>
    <updated>2020-11-26T14:26:52.018Z</updated>
    
    <content type="html"><![CDATA[<p>​        在日常开发中经常用 Git 进行代码管理，通常在本地写完代码后需要提交到远程仓库，但是由于第一次关联的时候，可能本地与远程仓库的代码不一致，导致初次提交失败，在此记录下解决方案。</p><a id="more"></a><h5 id="1- 新建远程仓库，获得仓库地址"><a href="#1- 新建远程仓库，获得仓库地址" class="headerlink" title="1. 新建远程仓库，获得仓库地址"></a>1. 新建远程仓库，获得仓库地址 </h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://github.com/xiaYuTian11/learning_demo.git</span><br></pre></td></tr></table></figure><h5 id="2- 初始化本地仓库"><a href="#2- 初始化本地仓库" class="headerlink" title="2. 初始化本地仓库"></a>2. 初始化本地仓库 </h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git init</span><br></pre></td></tr></table></figure><h5 id="3- 将忽略文件添加到 -gitignore"><a href="#3- 将忽略文件添加到 -gitignore" class="headerlink" title="3. 将忽略文件添加到 ==.gitignore=="></a>3. 将忽略文件添加到 ==.gitignore==</h5><h5 id="4- 添加需要版本控制的文件"><a href="#4- 添加需要版本控制的文件" class="headerlink" title="4. 添加需要版本控制的文件"></a>4. 添加需要版本控制的文件 </h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git add .</span><br></pre></td></tr></table></figure><h5 id="5- 暂存本地代码"><a href="#5- 暂存本地代码" class="headerlink" title="5. 暂存本地代码"></a>5. 暂存本地代码 </h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git commit -m <span class="string">&quot; 提交内容 & quot;</span>;</span><br></pre></td></tr></table></figure><h5 id="6- 关联远程仓库地址"><a href="#6- 关联远程仓库地址" class="headerlink" title="6. 关联远程仓库地址"></a>6. 关联远程仓库地址 </h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git remote add origin https://github.com/xiaYuTian11/learning_demo.git</span><br></pre></td></tr></table></figure><h5 id="7- 拉取代码包括历史代码"><a href="#7- 拉取代码包括历史代码" class="headerlink" title="7. 拉取代码包括历史代码"></a>7. 拉取代码包括历史代码 </h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git pull origin master --allow-unrelated-histories</span><br></pre></td></tr></table></figure><h5 id="8- 推送本地代码到远程仓库"><a href="#8- 推送本地代码到远程仓库" class="headerlink" title="8. 推送本地代码到远程仓库"></a>8. 推送本地代码到远程仓库 </h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><h5 id="9- 查看提交日志"><a href="#9- 查看提交日志" class="headerlink" title="9. 查看提交日志"></a>9. 查看提交日志 </h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 查看提交信息，包括版本号 (如：420717bd175bf65149b90d0bb0d2cf6ff7e353dd)，可用于版本回退 </span></span><br><span class="line">git <span class="built_in">log</span></span><br></pre></td></tr></table></figure><h5 id="10- 回退到指定版本"><a href="#10- 回退到指定版本" class="headerlink" title="10. 回退到指定版本"></a>10. 回退到指定版本 </h5><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 版本号可以只写前几位，Git 会自动去找。也不能只写前一两位，否则会找到多个版本号。</span></span><br><span class="line"><span class="comment"># git reset --hard 420717bd175bf65149b90d0bb0d2cf6ff7e353dd</span></span><br><span class="line"><span class="comment"># []：可写可不写 </span></span><br><span class="line"><span class="comment"># &#123;&#125;：那就必须要在 &#123;&#125; 内给出的选择里选一个。</span></span><br><span class="line"><span class="comment"># &lt;&gt;：表示必选 </span></span><br><span class="line"><span class="comment"># | : 分隔括号或大括号内的语法项目。只能选择一个项目。 </span></span><br><span class="line">git reset --hard  &lt; 版本号 &gt;</span><br></pre></td></tr></table></figure><p>​     完结㋡㋡ </p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        在日常开发中经常用 Git 进行代码管理，通常在本地写完代码后需要提交到远程仓库，但是由于第一次关联的时候，可能本地与远程仓库的代码不一致，导致初次提交失败，在此记录下解决方案。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Git" scheme="http://tanmw.top/tags/Git/"/>
    
    <category term="初始化" scheme="http://tanmw.top/tags/%E5%88%9D%E5%A7%8B%E5%8C%96/"/>
    
    <category term="远程仓库" scheme="http://tanmw.top/tags/%E8%BF%9C%E7%A8%8B%E4%BB%93%E5%BA%93/"/>
    
  </entry>
  
  <entry>
    <title>Logback 配置模版</title>
    <link href="http://tanmw.top/archives/c096da2d.html"/>
    <id>http://tanmw.top/archives/c096da2d.html</id>
    <published>2020-11-01T14:20:38.000Z</published>
    <updated>2020-12-20T12:33:40.199Z</updated>
    
    <content type="html"><![CDATA[<p>​        官方文档地址：<span class="exturl" data-url="aHR0cDovL2xvZ2JhY2sucW9zLmNoL2RvY3VtZW50YXRpb24uaHRtbA==">http://logback.qos.ch/documentation.html<i class="fa fa-external-link-alt"></i></span></p><a id="more"></a><h2 id="依赖"><a href="# 依赖" class="headerlink" title="依赖"></a> 依赖 </h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>ch.qos.logback<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>logback-classic<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>1.2.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="# 配置" class="headerlink" title="配置"></a> 配置 </h2><p>​    logback.xml   自用配置模版 </p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    scan: 当此属性设置为 true 时，配置文件如果发生改变，将会被重新加载，默认值为 true。</span></span><br><span class="line"><span class="comment">    scanPeriod: 设置监测配置文件是否有修改的时间间隔，如果没有给出时间单位，默认单位是毫秒。当 scan 为 true 时，此属性生效。默认的时间间隔为 1 分钟。</span></span><br><span class="line"><span class="comment">    de<span class="doctag">bug:</span> 当此属性设置为 true 时，将打印出 logback 内部日志信息，实时查看 logback 运行状态。默认值为 false。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span> <span class="attr">scan</span>=<span class="string">&quot;true&quot;</span> <span class="attr">scanPeriod</span>=<span class="string">&quot;60 seconds&quot;</span> <span class="attr">debug</span>=<span class="string">&quot;false&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logback.logDir&quot;</span> <span class="attr">value</span>=<span class="string">&quot;./logs&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;logback.appName&quot;</span> <span class="attr">value</span>=<span class="string">&quot;log&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">              <span class="attr">value</span>=<span class="string">&quot;% date&#123;yyyy-MM-dd HH:mm:ss&#125; | % highlight (%-5level) | % boldYellow (% thread) | % boldGreen (% logger.% method) | % highlight (% msg% n)&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;FILE_PATTERN&quot;</span> <span class="attr">value</span>=<span class="string">&quot;% date&#123;yyyy-MM-dd HH:mm:ss&#125; | %-1level | % thread | % logger.% method | % msg% n&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出到控制台 ConsoleAppender --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;consoleLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.ConsoleAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;CONSOLE_LOG_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 过滤器 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>INFO<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出 INFO 日志到文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;fileInfoLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            如果只是想要 Info 级别的日志，只是过滤 info 还是会输出 Error 日志，因为 Error 的级别高，</span></span><br><span class="line"><span class="comment">            所以我们使用下面的策略，可以避免输出 Error 的日志 </span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.LevelFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 过滤 Error--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>ERROR<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 匹配到就禁止 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMatch</span>&gt;</span>DENY<span class="tag">&lt;/<span class="name">onMatch</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 没有匹配到就允许 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">onMismatch</span>&gt;</span>ACCEPT<span class="tag">&lt;/<span class="name">onMismatch</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            日志名称，如果没有 File 属性，那么只会使用 FileNamePattern 的文件路径规则 </span></span><br><span class="line"><span class="comment">            如果同时有 & lt;File&gt; 和 & lt;FileNamePattern&gt;，那么当天日志是 & lt;File&gt;，明天会自动把今天 </span></span><br><span class="line"><span class="comment">            的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;logback.logDir&#125;/$&#123;logback.appName&#125;_info.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 滚动策略，按照时间和大小滚动 SizeAndTimeBasedRollingPolicy --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件路径，定义了日志的切分方式 —— 把每一天的日志归档到一个文件中，以防止日志填满整个磁盘空间 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;logback.logDir&#125;/$&#123;logback.appName&#125;_info_% d&#123;yyyy-MM-dd&#125;_% i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 只保留最近 90 天的日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>90<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 单文件最大值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出编码格式化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 输出 Error 日志到文件 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;fileErrorLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.RollingFileAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 如果只是想要 Error 级别的日志，那么需要过滤一下，默认是 info 级别的，ThresholdFilter --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">filter</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.filter.ThresholdFilter&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">level</span>&gt;</span>Error<span class="tag">&lt;/<span class="name">level</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">filter</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">            日志名称，如果没有 File 属性，那么只会使用 FileNamePattern 的文件路径规则 </span></span><br><span class="line"><span class="comment">            如果同时有 & lt;File&gt; 和 & lt;FileNamePattern&gt;，那么当天日志是 & lt;File&gt;，明天会自动把今天 </span></span><br><span class="line"><span class="comment">            的日志改名为今天的日期。即，&lt;File&gt; 的日志都是当天的。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">File</span>&gt;</span>$&#123;logback.logDir&#125;/$&#123;logback.appName&#125;_error.log<span class="tag">&lt;/<span class="name">File</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 滚动策略，按照时间滚动 TimeBasedRollingPolicy --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">rollingPolicy</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 文件路径，定义了日志的切分方式 —— 把每一天的日志归档到一个文件中，以防止日志填满整个磁盘空间 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">FileNamePattern</span>&gt;</span>$&#123;logback.logDir&#125;/$&#123;logback.appName&#125;_error_% d&#123;yyyy-MM-dd&#125;_% i.log<span class="tag">&lt;/<span class="name">FileNamePattern</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 只保留最近 90 天的日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxHistory</span>&gt;</span>90<span class="tag">&lt;/<span class="name">maxHistory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 单文件最大值 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">maxFileSize</span>&gt;</span>100MB<span class="tag">&lt;/<span class="name">maxFileSize</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 用来指定日志文件的上限大小，那么到了这个值，就会删除旧的日志 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">totalSizeCap</span>&gt;</span>1GB<span class="tag">&lt;/<span class="name">totalSizeCap</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">rollingPolicy</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 日志输出编码格式化 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">encoder</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.encoder.PatternLayoutEncoder&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">charset</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">charset</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">pattern</span>&gt;</span>$&#123;FILE_PATTERN&#125;<span class="tag">&lt;/<span class="name">pattern</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">encoder</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 异步输出 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">appender</span> <span class="attr">name</span>=<span class="string">&quot;asyncLog&quot;</span> <span class="attr">class</span>=<span class="string">&quot;ch.qos.logback.classic.AsyncAppender&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 不丢失日志。默认的，如果队列的 80% 已满，则会丢弃 TRACT、DEBUG、INFO 级别的日志 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">discardingThreshold</span>&gt;</span>0<span class="tag">&lt;/<span class="name">discardingThreshold</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 更改默认的队列的深度，该值会影响性能。默认值为 256 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">queueSize</span>&gt;</span>512<span class="tag">&lt;/<span class="name">queueSize</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 添加附加的 appender, 最多只能添加一个 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;fileErrorLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">appender</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!-- 指定最基础的日志输出级别 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">root</span> <span class="attr">level</span>=<span class="string">&quot;INFO&quot;</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- appender 将会添加到这个 loger --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;consoleLog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;fileInfoLog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;fileErrorLog&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">appender-ref</span> <span class="attr">ref</span>=<span class="string">&quot;asyncLog&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">root</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure><p>** 注意：配置里面百分号后有多余空格，需要删除，这是博客生成自动添加的，暂时没找到有效的处理手段！**</p><p>** 比如：**</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;CONSOLE_LOG_PATTERN&quot;</span></span></span><br><span class="line"><span class="tag">             <span class="attr">value</span>=<span class="string">&quot;% date&#123;yyyy-MM-dd HH:mm:ss&#125; | % highlight (%-5level) | % boldYellow (% thread) | % boldGreen (% logger.% method) | % highlight (% msg% n)&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​     ** 全局搜索 %+ 空格然后替换成 % 即可。**</p>]]></content>
    
    
    <summary type="html">&lt;p&gt;​        官方文档地址：&lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cDovL2xvZ2JhY2sucW9zLmNoL2RvY3VtZW50YXRpb24uaHRtbA==&quot;&gt;http://logback.qos.ch/documentation.html&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;&lt;/p&gt;</summary>
    
    
    
    
    <category term="日志，logback" scheme="http://tanmw.top/tags/%E6%97%A5%E5%BF%97%EF%BC%8Clogback/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 2.x 整合 UidGenerator</title>
    <link href="http://tanmw.top/archives/1f43d92b.html"/>
    <id>http://tanmw.top/archives/1f43d92b.html</id>
    <published>2020-10-15T13:02:24.000Z</published>
    <updated>2020-10-15T13:36:46.072Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1- 概述"><a href="#1- 概述" class="headerlink" title="1. 概述"></a>1. 概述 </h2><p>​    SpringBoot 2.x 整合 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JhaWR1L3VpZC1nZW5lcmF0b3I="> 百度 UidGenerator<i class="fa fa-external-link-alt"></i></span>,MySQL 版本 10+。下载 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JhaWR1L3VpZC1nZW5lcmF0b3I=">百度 UidGenerator<i class="fa fa-external-link-alt"></i></span> 源码进行编译打成 Jar 引入整合工程。</p><a id="more"></a><h2 id="2- 创建表结构"><a href="#2- 创建表结构" class="headerlink" title="2. 创建表结构"></a>2. 创建表结构</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> WORKER_NODE;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> WORKER_NODE</span><br><span class="line">(</span><br><span class="line"><span class="keyword">ID</span> <span class="built_in">BIGINT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT <span class="keyword">COMMENT</span> <span class="string">&#x27;auto increment id&#x27;</span>,</span><br><span class="line">HOST_NAME <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;host name&#x27;</span>,</span><br><span class="line">PORT <span class="built_in">VARCHAR</span>(<span class="number">64</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;port&#x27;</span>,</span><br><span class="line"><span class="keyword">TYPE</span> <span class="built_in">INT</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;node type: ACTUAL or CONTAINER&#x27;</span>,</span><br><span class="line">LAUNCH_DATE <span class="built_in">DATE</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;launch date&#x27;</span>,</span><br><span class="line">MODIFIED <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;modified time&#x27;</span>,</span><br><span class="line">CREATED <span class="built_in">TIMESTAMP</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> <span class="keyword">COMMENT</span> <span class="string">&#x27;created time&#x27;</span>,</span><br><span class="line">PRIMARY <span class="keyword">KEY</span>(<span class="keyword">ID</span>)</span><br><span class="line">)</span><br><span class="line"> <span class="keyword">COMMENT</span>=<span class="string">&#x27;DB WorkerID Assigner for UID Generator&#x27;</span>,<span class="keyword">ENGINE</span> = <span class="keyword">INNODB</span>;</span><br></pre></td></tr></table></figure><h2 id="3- 源码打包"><a href="#3- 源码打包" class="headerlink" title="3. 源码打包"></a>3. 源码打包</h2><p>​    将 UidGenerator 下载到本地打成 jar 包，新建 SpringBoot 项目，和 pom.xml 文件同级目录创建 lib 文件夹，将生成的 jar 包放入到 lib 文件夹中，同时在 pom.xml 中引入依赖</p><h2 id="4- 相关依赖"><a href="#4- 相关依赖" class="headerlink" title="4. 相关依赖"></a>4. 相关依赖</h2><p>pom.xml 引入相关依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>runtime<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis.spring.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.1.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>commons-lang<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.junit.vintage<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit-vintage-engine<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baidu.fsg<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>uid-generator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>system<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">systemPath</span>&gt;</span>$&#123;project.basedir&#125;/lib/uid-generator-1.0.0-SNAPSHOT.jar<span class="tag">&lt;/<span class="name">systemPath</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.13<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="5- 数据库连接配置"><a href="#5- 数据库连接配置" class="headerlink" title="5. 数据库连接配置"></a>5. 数据库连接配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">datasource:</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">jdbc:mysql://127.0.0.01:3306/demo</span></span><br><span class="line">    <span class="attr">driver-class-name:</span> <span class="string">com.mysql.cj.jdbc.Driver</span></span><br><span class="line">    <span class="attr">username:</span> <span class="string">root</span></span><br><span class="line">    <span class="attr">password:</span> <span class="number">123456</span></span><br><span class="line">    <span class="attr">hikari:</span></span><br><span class="line">      <span class="attr">minimum-idle:</span> <span class="number">1</span></span><br><span class="line">      <span class="attr">maximum-pool-size:</span> <span class="number">12</span></span><br><span class="line">      <span class="attr">idle-timeout:</span> <span class="number">10000</span></span><br><span class="line">      <span class="attr">max-lifetime:</span> <span class="number">180000</span></span><br><span class="line">      <span class="attr">connection-timeout:</span> <span class="number">60000</span>  </span><br><span class="line">      <span class="attr">connection-test-query:</span> <span class="string">select</span> <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="attr">mybatis:</span></span><br><span class="line">  <span class="attr">mapper-locations:</span> <span class="string">classpath*:/mapper/WorkerNodeMapper.xml</span></span><br></pre></td></tr></table></figure><h2 id="6- 整合"><a href="#6- 整合" class="headerlink" title="6. 整合"></a>6. 整合</h2><p>​    直接用源代码里的相关配置及类会导致 SpringBoot 启动后 DisposableWorkerIdAssigner 注入不了 workerNodeDAO 的问题。所以将源码中的部分代码拷贝到本地工程中。</p><ol><li><p>拷贝 WorkerNodeDAO.java 到自己的 SpringBoot 项目中，重命名 WorkerNodeMapper.java</p></li><li><p>拷贝 WORKER_NODE.xml 到自己的 SpringBoot 项目中，重命名成 WorkerNodeMapper.xml</p></li><li><p>拷贝 DisposableWorkerIdAssigner.java 到 SpringBoot 项目中，重命名为 DisposableWorkerIdAssignerMy.java</p></li><li><p>将 WorkerNodeMapper.xml 中 namespace 改成本地对应的 WorkerNodeMapper.java 全限定名称</p></li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.example.uidgenerator.dao.WorkerNodeMapper&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure><ol start="5"><li>将 DisposableWorkerIdAssignerMy 类中注入的 WorkerNodeDAO 改为 WorkerNodeMapper</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> WorkerNodeMapper workerNodeDAO;</span><br></pre></td></tr></table></figure><ol start="6"><li>创建 UidGenerator 配置类</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UidGeneratorConfiguration</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> DisposableWorkerIdAssignerMy <span class="title">disposableWorkerIdAssigner</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> DisposableWorkerIdAssignerMy ();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * disposableWorkerIdAssigner 的入参对象类型最好使用 WorkerIdAssigner，</span></span><br><span class="line"><span class="comment">     * 否则其他地方引入 CGLib 动态代理的时候可能会导致代理混用的问题 </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> disposableWorkerIdAssigner</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> CachedUidGenerator <span class="title">cachedUidGenerator</span><span class="params">(DisposableWorkerIdAssignerMy disposableWorkerIdAssigner)</span></span>&#123;</span><br><span class="line">        CachedUidGenerator cachedUidGenerator = <span class="keyword">new</span> CachedUidGenerator ();</span><br><span class="line">        cachedUidGenerator.setWorkerIdAssigner (disposableWorkerIdAssigner);</span><br><span class="line">        <span class="comment">// 以下为可选配置，如未指定将采用默认值 </span></span><br><span class="line">        cachedUidGenerator.setTimeBits (<span class="number">29</span>);</span><br><span class="line">        cachedUidGenerator.setWorkerBits (<span class="number">21</span>);</span><br><span class="line">        cachedUidGenerator.setSeqBits (<span class="number">13</span>);</span><br><span class="line">        cachedUidGenerator.setEpochStr (<span class="string">&quot;2016-09-20&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//RingBuffer size 扩容参数，可提高 UID 生成的吞吐量 </span></span><br><span class="line">        <span class="comment">// 默认：3， 原 bufferSize=8192, 扩容后 bufferSize= 8192 &lt;&lt; 3 = 65536</span></span><br><span class="line">        cachedUidGenerator.setBoostPower (<span class="number">3</span>);</span><br><span class="line">        <span class="comment">// 指定何时向 RingBuffer 中填充 UID, 取值为百分比 (0, 100), 默认为 50</span></span><br><span class="line">        <span class="comment">// 举例: bufferSize=1024, paddingFactor=50 -&gt; threshold=1024 * 50 / 100 = 512.</span></span><br><span class="line">        <span class="comment">// 当环上可用 UID 数量 &lt; 512 时，将自动对 RingBuffer 进行填充补全 </span></span><br><span class="line">        <span class="comment">//&lt;property name=&quot;paddingFactor&quot; value=&quot;50&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 另外一种 RingBuffer 填充时机，在 Schedule 线程中，周期性检查填充 </span></span><br><span class="line">        <span class="comment">// 默认：不配置此项，即不实用 Schedule 线程。如需使用，请指定 Schedule 线程时间间隔，单位：秒 </span></span><br><span class="line">        cachedUidGenerator.setScheduleInterval (<span class="number">60L</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">// 拒绝策略：当环已满，无法继续填充时 </span></span><br><span class="line">        <span class="comment">// 默认无需指定，将丢弃 Put 操作，仅日志记录。如有特殊需求，请实现 RejectedPutBufferHandler 接口 (支持 Lambda 表达式)</span></span><br><span class="line">        <span class="comment">//&lt;property name=&quot;rejectedPutBufferHandler&quot; ref=&quot;XxxxYourPutRejectPolicy&quot;&gt;&lt;/property&gt;</span></span><br><span class="line">        <span class="comment">//cachedUidGenerator.setRejectedPutBufferHandler ();</span></span><br><span class="line">        <span class="comment">// 拒绝策略：当环已空，无法继续获取时 --&gt;</span></span><br><span class="line">        <span class="comment">// 默认无需指定，将记录日志，并抛出 UidGenerateException 异常。如有特殊需求，请实现 RejectedTakeBufferHandler 接口 (支持 Lambda 表达式) --&gt;</span></span><br><span class="line">        <span class="comment">//&lt;property name=&quot;rejectedTakeBufferHandler&quot; ref=&quot;XxxxYourTakeRejectPolicy&quot;&gt;&lt;/property&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cachedUidGenerator;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ol start="7"><li>启动类配置</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="meta">@ComponentScan (&#123;&quot;com.baidu.fsg&quot;,&quot;com.example.uidgenerator&quot;&#125;)</span></span><br><span class="line"><span class="meta">@MapperScan (&quot;com.example.uidgenerator&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">UidGeneratorApplication</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> </span>&#123;</span><br><span class="line">        SpringApplication.run (UidGeneratorApplication.class, args);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="7- 测试"><a href="#7- 测试" class="headerlink" title="7. 测试"></a>7. 测试</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith (SpringJUnit4ClassRunner.class)</span></span><br><span class="line"><span class="meta">@SpringBootTest (classes = UidGeneratorApplication.class)</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">UidGeneratorApplicationTests</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> UidGenerator uidGenerator;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">contextLoads</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">100000</span>; i++) &#123;</span><br><span class="line">            System.out.println (uidGenerator.getUID ());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​    运行测试类可以看到控制台输出生成的唯一 ID，数据库也会出现相应的记录。</p><p>​    Demo 源代码地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYVl1VGlhbjExL2xlYXJuaW5nX2RlbW8vdHJlZS9tYXN0ZXIvdWlkLWdlbmVyYXRvcg==">https://github.com/xiaYuTian11/learning_demo/tree/master/uid-generator<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h2&gt;&lt;p&gt;​    SpringBoot 2.x 整合 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL2JhaWR1L3VpZC1nZW5lcmF0b3I=&quot;&gt;百度 UidGenerator&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt;,MySQL 版本 10+。下载 &lt;span class=&quot;exturl&quot; data-url=&quot;aHR0cHM6Ly9naXRodWIuY29tL2JhaWR1L3VpZC1nZW5lcmF0b3I=&quot;&gt;百度 UidGenerator&lt;i class=&quot;fa fa-external-link-alt&quot;&gt;&lt;/i&gt;&lt;/span&gt; 源码进行编译打成 Jar 引入整合工程。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="http://tanmw.top/tags/SpringBoot/"/>
    
    <category term="UidGenerator" scheme="http://tanmw.top/tags/UidGenerator/"/>
    
    <category term="分布式" scheme="http://tanmw.top/tags/%E5%88%86%E5%B8%83%E5%BC%8F/"/>
    
    <category term="分布式ID" scheme="http://tanmw.top/tags/%E5%88%86%E5%B8%83%E5%BC%8FID/"/>
    
  </entry>
  
  <entry>
    <title>分布式 ID 方案 --SnowFlake（雪花算法）</title>
    <link href="http://tanmw.top/archives/8b811d4f.html"/>
    <id>http://tanmw.top/archives/8b811d4f.html</id>
    <published>2020-10-14T13:11:49.000Z</published>
    <updated>2020-10-15T12:40:03.982Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原理"><a href="# 原理" class="headerlink" title="原理"></a>原理</h2><p>​         SnowFlake 算法来源于 Twitter，用于生成全局唯一 ID 的一种算法。SnowFlake 算法生成的 ID 有 64 位 bit, 分为 5 部分组成：</p><a id="more"></a><blockquote><p>​    0     00000000000000000000000000000000000000000    00000    00000    000000000000</p></blockquote><ol><li>1bit 位不用，为标识部分，该位主要用来保持 ID 的自增性，如果占用最高位，整个值将变成负数；</li><li>41bit 位时间戳，标识当前时间距指定开始时间的毫秒级差值，41 位时间戳可以标识的时间大概为 （1L &lt;&lt; 41） / (1000 * 60 * 60 * 24 * 365) = 69.73 年；</li><li>5bit 位数据中心标识，可以标识 1L &lt;&lt; 5 = 32 个数据中心；</li><li>5bit 位机器标识，可以标识 1L &lt;&lt; 5 = 32 台机器；</li><li>12bit 位序列号，支持同毫秒内同一数据中心同一台机器生成 1L &lt;&lt; 12 = 4096 个 ID；</li></ol><p>​        除开第一个 bit 位用于标识作用，其他区段的 bit 位都可以灵活调整，比如不需要这么多数据中心，可以少占用几个 bit 位，将多余的 bit 位分配到其他分段或者根据具体业务来自定义生成规则；</p><h2 id="Java- 实现"><a href="#Java- 实现" class="headerlink" title="Java 实现"></a>Java 实现</h2><p>​          网上 Java 实现的 SnowFlake 特别多，基本上都是一模一样的，在此也记录下自己造的轮子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 雪花算法 </span></span><br><span class="line"><span class="comment"> * 0-00000000000000000000000000000000000000000-0000000000-000000000000</span></span><br><span class="line"><span class="comment"> * 1) 1 位，不用。二进制中最高位为 1 的都是负数，但是我们生成的 id 一般都使用整数，所以这个最高位固定是 0</span></span><br><span class="line"><span class="comment"> * 2) 41 位，用来记录时间戳（毫秒）。41 位可以表示 2^41−1 个数字，如果只用来表示正整数（计算机中正数包含 0），可以表示的数值范围是：0 至 2^41−1，</span></span><br><span class="line"><span class="comment"> * 减 1 是因为可表示的数值范围是从 0 开始算的，而不是 1。也就是说 41 位可以表示 2^41−1 个毫秒的值，转化成单位年则是 (2^41−1)/(1000∗60∗60∗24∗365)=69 年 </span></span><br><span class="line"><span class="comment"> * 3) 10 位，用来记录工作机器 id。可以部署在 2^10=1024 个节点，包括 5 位 datacenterId 和 5 位 workerId，5 位（bit）可以表示的最大正整数是 2^5−1=31，</span></span><br><span class="line"><span class="comment"> * 即可以用 0、1、2、3、....31 这 32 个数字，来表示不同的 datecenterId 或 workerId</span></span><br><span class="line"><span class="comment"> * 4) 12 位，序列号，用来记录同毫秒内产生的不同 id。12 位（bit）可以表示的最大正整数是 2^12−1=4095，即可以用 0、1、2、3、....4094 这 4095 个数字，</span></span><br><span class="line"><span class="comment"> * 来表示同一机器同一时间截（毫秒) 内产生的 4095 个 ID 序号由于在 Java 中 64bit 的整数是 long 类型，所以在 Java 中 SnowFlake 算法生成的 id 就是 long 来存储的。</span></span><br><span class="line"><span class="comment"> * &lt;p&gt;</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> TMW</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@since</span> 2020/10/12</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowFlakeUtil</span> </span>&#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 起始时间戳：2020-01-01 00:00:00</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> START_TIMESTAMP = <span class="number">1577808000000L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号占用的位数 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> SEQUENCE_BIT = <span class="number">12</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器标识占用的位数 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MACHINE_BIT = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心占用的位数 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> DATACENTER_BIT = <span class="number">5</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 每一部分的最大值：先进行左移运算，在进行非运算取反 </span></span><br><span class="line"><span class="comment">     * &lt;p&gt;</span></span><br><span class="line"><span class="comment">     * 用位运算计算出最大支持的数据中心数量：31 (从 0 开始)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_DATACENTER_NUM = ~(-<span class="number">1L</span> &lt;&lt; DATACENTER_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用位运算计算出最大支持的机器数量：31 (从 0 开始)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_MACHINE_NUM = ~(-<span class="number">1L</span> &lt;&lt; MACHINE_BIT);</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 用位运算计算出 12 位能存储的最大正整数：4095 (从 0 开始)</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_SEQUENCE = ~(-<span class="number">1L</span> &lt;&lt; SEQUENCE_BIT);</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器标志较序列号的偏移量 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MACHINE_LEFT = SEQUENCE_BIT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心较机器标志的偏移量 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> DATACENTER_LEFT = MACHINE_LEFT + MACHINE_BIT;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 时间戳较数据中心的偏移量 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> TIMESTAMP_LEFT = DATACENTER_LEFT + DATACENTER_BIT;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 序列号 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> sequence = <span class="number">0L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 上一次时间戳 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> lastStamp = -<span class="number">1L</span>;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 数据中心 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> datacenterId;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 机器标识 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">long</span> machineId;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">    * 构造方法初始化数据中心 ID 和机器 ID</span></span><br><span class="line"><span class="comment">    */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SnowFlakeUtil</span><span class="params">(<span class="keyword">long</span> machineId, <span class="keyword">long</span> datacenterId)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (machineId &gt; MAX_MACHINE_NUM || machineId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (String.format (<span class="string">&quot;worker Id can&#x27;t be greater than % d or less than 0&quot;</span>, MAX_MACHINE_NUM));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (datacenterId &gt; MAX_DATACENTER_NUM || datacenterId &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException (String.format (<span class="string">&quot;datacenter Id can&#x27;t be greater than % d or less than 0&quot;</span>, MAX_DATACENTER_NUM));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">this</span>.machineId = machineId;</span><br><span class="line">        <span class="keyword">this</span>.datacenterId = datacenterId;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个 id</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> next id</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">long</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// 当前时间戳 </span></span><br><span class="line">        <span class="keyword">long</span> currStamp = getNewStamp ();</span><br><span class="line">        <span class="comment">// 当前时间戳小于上次时间戳，出现时钟回拨 </span></span><br><span class="line">        <span class="keyword">if</span> (currStamp &lt; lastStamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException (<span class="string">&quot;Clock moved backwards.  Refusing to generate id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 同一毫秒内 </span></span><br><span class="line">        <span class="keyword">if</span> (currStamp == lastStamp) &#123;</span><br><span class="line">            sequence = (sequence + <span class="number">1</span>) &amp; MAX_SEQUENCE;</span><br><span class="line">            <span class="comment">// 同一毫秒的序列数已经达到最大 </span></span><br><span class="line">            <span class="keyword">if</span> (sequence == <span class="number">0L</span>) &#123;</span><br><span class="line">                <span class="comment">// 获取下一时间的时间戳并赋值给当前时间戳 </span></span><br><span class="line">                currStamp = getNextMill ();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 不同毫秒内，重置序列为 0</span></span><br><span class="line">            sequence = <span class="number">0L</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        lastStamp = currStamp;</span><br><span class="line">        <span class="comment">// 时间戳 | 数据中心 | 机器码 | 序列号 </span></span><br><span class="line">        <span class="keyword">return</span> ((currStamp - START_TIMESTAMP) &lt;&lt; TIMESTAMP_LEFT)</span><br><span class="line">            | (datacenterId &lt;&lt; DATACENTER_LEFT)</span><br><span class="line">            | (machineId &lt;&lt; MACHINE_LEFT)</span><br><span class="line">            | sequence;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 获取下一个时间戳 </span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 时间戳 </span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getNextMill</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">long</span> mill = getNewStamp ();</span><br><span class="line">        <span class="keyword">while</span> (mill &lt;= lastStamp) &#123;</span><br><span class="line">            mill = getNewStamp ();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> mill;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">long</span> <span class="title">getNewStamp</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> System.currentTimeMillis ();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>​          雪花算法大概原理就是这样，这个算法严重依赖于服务器时间，所以一旦服务器时间出现了回拨现象，就有可能导致生成重复的 ID，网上针对 SnowFlake 时钟回拨问题有很多解决方案，比如 <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL01laXR1YW4tRGlhbnBpbmcvTGVhZi9ibG9iL21hc3Rlci9SRUFETUVfQ04ubWQ=">美团 Leaf<i class="fa fa-external-link-alt"></i></span>、<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2JhaWR1L3VpZC1nZW5lcmF0b3I=">百度 uid-generator<i class="fa fa-external-link-alt"></i></span> 等。下面说下比较简单的解决方案。</p><h2 id="时钟回拨"><a href="# 时钟回拨" class="headerlink" title="时钟回拨"></a>时钟回拨 </h2><h3 id="在一定范围内等待时钟追上当前时间"><a href="# 在一定范围内等待时钟追上当前时间" class="headerlink" title="在一定范围内等待时钟追上当前时间"></a> 在一定范围内等待时钟追上当前时间</h3><ol><li>定义时钟回拨后等待最大值：</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 时钟回拨最大值 3 毫秒，不建议大于 5 毫秒 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_BACKWARD_MS = <span class="number">3</span>;</span><br></pre></td></tr></table></figure><p>2.nextId () 方法判断当前时间小于最后时间时，等待时钟追上当前时间：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 当前时间戳小于上次时间戳，出现时钟回拨 </span></span><br><span class="line"><span class="keyword">if</span> (currStamp &lt; lastStamp) &#123;</span><br><span class="line">    <span class="comment">// 偏移量 </span></span><br><span class="line">    <span class="keyword">long</span> offset = lastStamp - currStamp;</span><br><span class="line">    <span class="keyword">if</span> (offset &lt;= MAX_BACKWARD_MS) &#123;</span><br><span class="line">        <span class="comment">// 休眠等待 </span></span><br><span class="line">        LockSupport.parkNanos (TimeUnit.MICROSECONDS.toNanos (offset));</span><br><span class="line">        <span class="comment">// 重新获取当前值 </span></span><br><span class="line">        currStamp = getNewStamp ();</span><br><span class="line">        <span class="comment">// 如果仍然小于上次时间戳，可以直接抛异常或者采用扩展字段 extension</span></span><br><span class="line">        <span class="keyword">if</span> (currStamp &lt; lastStamp) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException (<span class="string">&quot;Clock moved backwards.  Refusing to generate id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="利用扩张位"><a href="# 利用扩张位" class="headerlink" title="利用扩张位"></a>利用扩张位</h3><p>​            由于 SnowFlake 最后序列号占用 12 位 bit，一毫秒可以生成 4096 个 ID，一般系统用不到这么大的并发量的的话，可以拿出几位当成时钟回拨扩展位，或者其他几部分也可以拿出几位来用于扩展。在此拿出序列号的 2 位用于时钟回拨的扩展。</p><ol><li>定义时钟回拨占用位位数</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 序列号占用的位数，12 可以每毫秒生成 4096 个，一般业务根本不需要用到这么大的并发，所以缩短到 10 位，</span></span><br><span class="line"><span class="comment">  * 当然也可以缩减数据中心和机器 id 的位数 </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> SEQUENCE_BIT = <span class="number">10</span>;</span><br><span class="line"> <span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 时钟回拨扩展次数，最大承受三次时钟回拨 </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> BACK_EXTENSION_BIT = <span class="number">2</span>;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">  * 最大次数 </span></span><br><span class="line"><span class="comment">  */</span></span><br><span class="line"> <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="keyword">long</span> MAX_BACKWARD_COUNT = ~(-<span class="number">1L</span> &lt;&lt; BACK_EXTENSION_BIT);</span><br></pre></td></tr></table></figure><p>2.nextId () 方法判断回次数</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (offset &lt;= MAX_BACKWARD_MS) &#123;</span><br><span class="line">    <span class="comment">// 休眠等待 </span></span><br><span class="line">    LockSupport.parkNanos (TimeUnit.MICROSECONDS.toNanos (offset));</span><br><span class="line">    <span class="comment">// 重新获取当前值 </span></span><br><span class="line">    currStamp = getNewStamp ();</span><br><span class="line">    <span class="comment">// 如果仍然小于上次时间戳，可以直接抛异常或者采用扩展字段 extension</span></span><br><span class="line">    <span class="keyword">if</span> (currStamp &lt; lastStamp) &#123;</span><br><span class="line">        <span class="keyword">if</span> (backwardCount &lt; MAX_BACKWARD_COUNT) &#123;</span><br><span class="line">            backwardCount++;</span><br><span class="line">            <span class="keyword">return</span> bitOption (currStamp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">// 三次回拨后直接抛出异常，后续进行人为干预，处理好服务器时间 </span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException (<span class="string">&quot;Clock moved backwards.  Refusing to generate id&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (backwardCount &lt; MAX_BACKWARD_COUNT) &#123;</span><br><span class="line">        backwardCount++;</span><br><span class="line">        <span class="keyword">return</span> bitOption (currStamp);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 三次回拨后直接抛出异常，后续进行人为干预，处理好服务器时间 </span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> RuntimeException (<span class="string">&quot;Clock moved backwards.  Refusing to generate id&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 位运算拼接 </span></span><br><span class="line"><span class="comment">*</span></span><br><span class="line"><span class="comment">* <span class="doctag">@param</span> currStamp</span></span><br><span class="line"><span class="comment">* <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">long</span> <span class="title">bitOption</span><span class="params">(<span class="keyword">long</span> currStamp)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 时间戳 | 数据中心 | 机器码 | 序列号 | 时钟回拨次数 </span></span><br><span class="line">    <span class="keyword">return</span> (currStamp - START_TIMESTAMP) &lt;&lt; TIMESTAMP_LEFT</span><br><span class="line">        | datacenterId &lt;&lt; DATACENTER_LEFT</span><br><span class="line">        | machineId &lt;&lt; MACHINE_LEFT</span><br><span class="line">        | sequence &lt;&lt; SEQUENCE_LEFT</span><br><span class="line">        | backwardCount;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="用 -PowerMockito- 测试"><a href="# 用 -PowerMockito- 测试" class="headerlink" title="用 PowerMockito 测试"></a>用 PowerMockito 测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RunWith (PowerMockRunner.class)</span></span><br><span class="line"><span class="meta">@PrepareForTest (&#123;System.class, SnowFlakeBackExtension.class&#125;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SnowFlakeBackExtensionTest</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">nextId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="comment">// SnowFlakeBackExtension SnowFlake 算法类 </span></span><br><span class="line">        SnowFlakeBackExtension extension = <span class="keyword">new</span> SnowFlakeBackExtension (<span class="number">1</span>, <span class="number">2</span>);</span><br><span class="line">        <span class="keyword">int</span> size = <span class="number">100</span>;</span><br><span class="line">        <span class="keyword">long</span> beginTime = System.currentTimeMillis ();</span><br><span class="line">        Set&lt;Long&gt; set = <span class="keyword">new</span> ConcurrentHashSet&lt;&gt;();</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">            set.add (extension.nextId ());</span><br><span class="line">        &#125;</span><br><span class="line">        LockSupport.parkNanos (TimeUnit.SECONDS.toNanos (<span class="number">1</span>));</span><br><span class="line">        PowerMockito.mockStatic (System.class);</span><br><span class="line">        PowerMockito.when (System.currentTimeMillis ()).thenReturn (beginTime);</span><br><span class="line">        Assertions.assertThat (System.currentTimeMillis ()).isEqualTo (beginTime);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size; i++) &#123;</span><br><span class="line">           <span class="comment">// 大于三次时钟回拨后断言出现异常 </span></span><br><span class="line">            <span class="keyword">if</span> (i &gt;= <span class="number">3</span>) &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Assertions.assertThat (extension.nextId ()).isInstanceOf (RuntimeException.class);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (RuntimeException e) &#123;</span><br><span class="line">                    Assertions.assertThat (e.getMessage ()).isEqualTo (<span class="string">&quot;Clock moved backwards.  Refusing to generate id&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                set.add (extension.nextId ());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        MockRepository.remove (System.class);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; size * <span class="number">120</span>; i++) &#123;</span><br><span class="line">            set.add (extension.nextId ());</span><br><span class="line">        &#125;</span><br><span class="line">        System.out.println (set.size ());</span><br><span class="line">        <span class="comment">// 断言生成的 ID 数量 </span></span><br><span class="line">        Assertions.assertThat (set.size ()).isEqualTo (size * <span class="number">121</span> + <span class="number">3</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            Demo 源代码地址：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYVl1VGlhbjExL2xlYXJuaW5nX2RlbW8vdHJlZS9tYXN0ZXIvc25vd2ZsYWtl">https://github.com/xiaYuTian11/learning_demo/tree/master/snowflake<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;原理&quot;&gt;&lt;a href=&quot;#原理&quot; class=&quot;headerlink&quot; title=&quot;原理&quot;&gt;&lt;/a&gt;原理&lt;/h2&gt;&lt;p&gt;​         SnowFlake 算法来源于 Twitter，用于生成全局唯一 ID 的一种算法。SnowFlake 算法生成的 ID 有 64 位 bit, 分为 5 部分组成：&lt;/p&gt;</summary>
    
    
    
    
    <category term="分布式ID" scheme="http://tanmw.top/tags/%E5%88%86%E5%B8%83%E5%BC%8FID/"/>
    
    <category term="SnowFlake" scheme="http://tanmw.top/tags/SnowFlake/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot logback.xml 读取 yml 中配置</title>
    <link href="http://tanmw.top/archives/cc464ebf.html"/>
    <id>http://tanmw.top/archives/cc464ebf.html</id>
    <published>2020-09-10T10:52:21.000Z</published>
    <updated>2020-10-14T13:16:03.101Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="# 背景" class="headerlink" title="背景"></a> 背景 </h2><p>​            最近部署 Spring Boot 项目时发现在 logback.xml 中配置的日志存放路径为相对路径，导致我以不同的方式启动项目时，日志文件生成的目录是不一致的，所以决定将 logback.xml 中的日志文件存放路径改为相对路径，但是在使用中发现 logback.xml 不能读取到 yml 中的属性。</p><a id="more"></a><h2 id="配置"><a href="# 配置" class="headerlink" title="配置"></a> 配置 </h2><p>​        由于 Spring Boot 时加载顺序是先加载 logback.xml, 在加载 application.yml, 最后在加载 logback-spring.xml 文件。所以直接在 logback.xml 中配置读取 yml 是不行的。下面说下解决方案。</p><h3 id="1- 在 -yml- 文件中配置日志存放路径"><a href="#1- 在 -yml- 文件中配置日志存放路径" class="headerlink" title="1. 在 yml 文件中配置日志存放路径"></a>1. 在 yml 文件中配置日志存放路径 </h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">log:</span></span><br><span class="line">  <span class="attr">file:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/usr/soft/test/logs</span></span><br></pre></td></tr></table></figure><h3 id="2- 将 -logback-xml- 名称改为 -logback-spring-xml"><a href="#2- 将 -logback-xml- 名称改为 -logback-spring-xml" class="headerlink" title="2. 将 logback.xml 名称改为 logback-spring.xml"></a>2. 将 logback.xml 名称改为 logback-spring.xml</h3><h3 id="3- 在 -logback-spring-xml- 加入 -spring- 属性读取 -yml- 配置"><a href="#3- 在 -logback-spring-xml- 加入 -spring- 属性读取 -yml- 配置" class="headerlink" title="3. 在 logback-spring.xml 加入 spring 属性读取 yml 配置"></a>3. 在 logback-spring.xml 加入 spring 属性读取 yml 配置 </h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">springProperty</span> <span class="attr">scope</span>=<span class="string">&quot;context&quot;</span> <span class="attr">name</span>=<span class="string">&quot;logPath&quot;</span> <span class="attr">source</span>=<span class="string">&quot;log.file.path&quot;</span> <span class="attr">defaultValue</span>=<span class="string">&quot;logs&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><h3 id="4- 使用配置"><a href="#4- 使用配置" class="headerlink" title="4. 使用配置"></a>4. 使用配置 </h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;LOG_PATH&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;logPath&#125;&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure><p>​        配置完成后，部署时就可以在启动前修改 application.yml 文件中的相关配置，达到自定义的目的。</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;​            最近部署 Spring Boot 项目时发现在 logback.xml 中配置的日志存放路径为相对路径，导致我以不同的方式启动项目时，日志文件生成的目录是不一致的，所以决定将 logback.xml 中的日志文件存放路径改为相对路径，但是在使用中发现 logback.xml 不能读取到 yml 中的属性。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="http://tanmw.top/tags/SpringBoot/"/>
    
    <category term="logback" scheme="http://tanmw.top/tags/logback/"/>
    
  </entry>
  
  <entry>
    <title>ServiceLoader (SPI)</title>
    <link href="http://tanmw.top/archives/c575efb2.html"/>
    <id>http://tanmw.top/archives/c575efb2.html</id>
    <published>2020-09-09T11:25:44.000Z</published>
    <updated>2020-10-14T13:16:22.650Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="# 概述" class="headerlink" title="概述"></a>概述</h2><p>​        最近学习 Spring Boot 启动过程时，发现加载配置类时用到了 <code>java.util.ServiceLoader</code>，后来发现不止 Spring Boot 用到，其他很多框架，譬如 Dubbo，JDBC，日志框架等。</p><p>​        SPI 的核心思想就是解耦。定则规则，然后其他人进行自定义实现规则。</p><a id="more"></a><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a>使用 </h2><h3 id="代码"><a href="# 代码" class="headerlink" title="代码"></a> 代码</h3><p>SPI 的使用其实非常简单，主要分为以下几个步骤：</p><ul><li><p>定义一个接口及一个或多个实现类。</p></li><li><p>实现类必须带有无参构造方法。</p></li><li><p>在 resources 目录下创建 META-INF/services 目录，在 services 下创建一个以接口的全限定名为文件名的文件，将实现类的全限定名记录到这个文件里面，如果有多个实现类，直接换行进行记录，每行一个实现类。</p></li><li><p>通过 java.util.ServiceLoader load 方法进行加载。</p></li><li><p>  定义一个 Trip 接口：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sunnyday.jdk;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Trip</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">mode</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>  定义两个实现类：</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sunnyday.jdk.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RunTrip</span> <span class="keyword">implements</span> <span class="title">Trip</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot; 跑步前进 & quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">WalkTrip</span> <span class="keyword">implements</span> <span class="title">Trip</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mode</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot; 步行方式 & quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><pre><code>在 resources/META-INF/services 下创建名为 com.sunnyday.jdk.Trip 的文件，内容如下：<figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">com.sunnyday.jdk.impl.RunTrip</span><br><span class="line">com.sunnyday.jdk.impl.WalkTrip</span><br></pre></td></tr></table></figure></code></pre><h3 id="测试"><a href="# 测试" class="headerlink" title="测试"></a>测试 </h3><p> 执行测试方法</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">@Test</span><br><span class="line">  public void test () &#123;</span><br><span class="line">      final ClassLoader classLoader &#x3D; this.getClass ().getClassLoader ();</span><br><span class="line">      final ServiceLoader&lt;Trip&gt; load &#x3D; ServiceLoader.load (Trip.class, classLoader);</span><br><span class="line">      for (Trip next : load) &#123;</span><br><span class="line">          next.mode ();</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>控制台输出</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 跑步前进 </span><br><span class="line"> 步行方式 </span><br></pre></td></tr></table></figure><h2 id="免配置文件"><a href="# 免配置文件" class="headerlink" title="免配置文件"></a>免配置文件</h2><p>​        auto-service 是 Google 提供的工具类，可以在实现类上添加 @AutoService 注解并指定接口，可以省去手动配置类全限定名的麻烦。</p><p>代码：</p><p>接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sunnyday.google;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> TMW</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/8 15:58</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>实现类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sunnyday.google.impl;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.google.auto.service.AutoService;</span><br><span class="line"><span class="keyword">import</span> com.sunnyday.google.Weather;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> TMW</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2020/9/8 15:59</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@AutoService (Weather.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SunnyWeather</span> <span class="keyword">implements</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot; 明天艳阳高照 & quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@AutoService (Weather.class)</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RainWeather</span> <span class="keyword">implements</span> <span class="title">Weather</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        System.out.println (<span class="string">&quot; 明天将要下雨 & quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">report</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> ClassLoader classLoader = <span class="keyword">this</span>.getClass ().getClassLoader ();</span><br><span class="line">    <span class="keyword">final</span> ServiceLoader&lt;Weather&gt; weathers = ServiceLoader.load (Weather.class, classLoader);</span><br><span class="line">    <span class="keyword">for</span> (Weather weather : weathers) &#123;</span><br><span class="line">        weather.report ();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>不用添加配置文件，运行测试类可以看到控制台一样可以正常输出。</p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> 明天将要下雨 </span><br><span class="line"> 明天艳阳高照 </span><br></pre></td></tr></table></figure><p>源码参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYVl1VGlhbjExL2Jsb2dfZGVtby90cmVlL21hc3Rlci9TUEk=">https://github.com/xiaYuTian11/blog_demo/tree/master/SPI<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;​        最近学习 Spring Boot 启动过程时，发现加载配置类时用到了 &lt;code&gt;java.util.ServiceLoader&lt;/code&gt;，后来发现不止 Spring Boot 用到，其他很多框架，譬如 Dubbo，JDBC，日志框架等。&lt;/p&gt;
&lt;p&gt;​        SPI 的核心思想就是解耦。定则规则，然后其他人进行自定义实现规则。&lt;/p&gt;</summary>
    
    
    
    
    <category term="Jdk" scheme="http://tanmw.top/tags/Jdk/"/>
    
    <category term="SPI" scheme="http://tanmw.top/tags/SPI/"/>
    
  </entry>
  
  <entry>
    <title>InputStream 中文乱码</title>
    <link href="http://tanmw.top/archives/fe88a97f.html"/>
    <id>http://tanmw.top/archives/fe88a97f.html</id>
    <published>2020-09-07T11:32:35.000Z</published>
    <updated>2020-10-14T13:16:58.288Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="# 背景" class="headerlink" title="背景"></a> 背景 </h2><p>​        最近进行项目重构，发现之前文件读取重构之后出现数据乱码。最后发现是因为字节流的问题。</p><a id="more"></a><h2 id="字节流"><a href="# 字节流" class="headerlink" title="字节流"></a> 字节流 </h2><p>​         字节流是按照字节为基本单位来读取数据的 ，中文是占两个字节的，所以读取的时候可能出现丢失的情况。</p><p>​        读取文件 garbledTest.txt  内容如下 </p><figure class="highlight tex"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"> 滕王阁序 </span><br><span class="line">　　 豫章故郡，洪都新府。星分翼轸 (zhěn)，地接衡庐。襟三江而带五湖，控蛮荆而引瓯（ōu）越。物华天宝，龙光射牛斗之墟；人杰地灵，徐孺下陈蕃 (fān) 之榻。雄州雾列，俊采星驰，台隍 (huáng) 枕夷夏之交，宾主尽东南之美。都督阎公之雅望，棨 (qǐ) 戟遥临；宇文新州之懿 (yì) 范，襜 (chān) 帷 (wéi) 暂驻。十旬休假，胜友如云；千里逢迎，高朋满座。腾蛟起凤，孟学士之词宗；紫电清霜，王将军之武库。家君作宰，路出名区；童子何知，躬逢胜饯。</span><br><span class="line">　　时维九月，序属三秋。潦（lǎo）水尽而寒潭清，烟光凝而暮山紫。俨 (yǎn) 骖騑 (cān fēi) 于上路，访风景于崇阿 (ē)。临帝子之长洲，得天人之旧馆。层峦耸翠，上出重霄；飞阁流（一作 翔）丹，下临无地。鹤汀（tīng）凫 (fú) 渚（zhǔ），穷岛屿之萦 (yíng) 回；桂殿兰宫，即（一作 列）冈峦之体势。</span><br><span class="line">　　披绣闼（tà），俯雕甍 (méng)。山原旷其盈视，川泽纡 (yū) 其骇瞩。闾 (lǘ) 阎 (yán) 扑地，钟鸣鼎食之家；舸（gě) 舰弥津，青雀黄龙之舳（zhú）。云销雨霁 (jì)，彩彻区明（或作 虹销雨霁，彩彻云衢 qú）。落霞与孤鹜 (wù) 齐飞，秋水共长天一色。渔舟唱晚，响穷彭蠡（l ǐ）之滨；雁阵惊寒，声断衡阳之浦。</span><br><span class="line">　　遥襟甫畅，逸兴遄 (chuán) 飞。爽籁发而清风生，纤歌凝而白云遏 (è)。睢 (suī) 园绿竹，气凌彭泽之樽；邺 (yè) 水朱华，光照临川之笔。四美具，二难并。穷睇眄 (dì miǎn) 于中天，极娱游于暇日。天高地迥 (jiǒng)，觉宇宙之无穷；兴尽悲来，识盈虚之有数。望长安于日下，目吴会（kuài）于云间。地势极而南溟 (míng) 深，天柱高而北辰远。关山难越，谁悲失路之人；萍水相逢，尽是他乡之客。怀帝阍 (hūn) 而不见，奉宣室以何年。</span><br><span class="line">　　嗟 (jiē) 乎！时运不齐，命途多舛 (chuǎn)；冯唐易老，李广难封。屈贾谊（yì）于长沙，非无圣主；窜梁鸿于海曲，岂乏明时？所赖君子见机，达人知命。老当益壮，宁移白首之心？穷且益坚，不坠青云之志。酌贪泉而觉爽，处涸辙（hé zhé）以犹欢。北海虽赊（shē），扶摇可接；东隅 (yú) 已逝，桑榆非晚。孟尝高洁，空余报国之情；阮籍猖狂，岂效穷途之哭！</span><br><span class="line">　　勃，三尺微命，一介书生。无路请缨，等终军之弱冠（guàn）；有怀投笔，慕宗悫（què）之长风。舍簪（zān）笏（hù）于百龄，奉晨昏于万里。非谢家之宝树，接孟氏之芳邻。他日趋庭，叨 (tāo) 陪鲤对；今兹捧袂 (mèi)，喜托龙门。杨意不逢，抚凌云而自惜；钟期既遇，奏流水以何惭？</span><br><span class="line">　　呜呼！胜地不常，盛筵 (yán) 难再；兰亭已矣，梓 (zǐ) 泽丘墟。临别赠言，幸承恩于伟饯；登高作赋，是所望于群公。敢竭鄙怀，恭疏短引；一言均赋，四韵俱成。请洒潘江，各倾陆海云尔。　</span><br><span class="line">　　滕王高阁临江渚，佩玉鸣鸾罢歌舞。</span><br><span class="line">　　画栋朝飞南浦云，珠帘暮卷西山雨。</span><br><span class="line">　　闲云潭影日悠悠，物换星移几度秋。</span><br><span class="line">　　阁中帝子今何在？槛外长江空自流。</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 缓存字节流 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bufferedInputStreamTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> URL url = <span class="keyword">this</span>.getClass ().getClassLoader ().getResource (<span class="string">&quot;io/garbledTest.txt&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File (url.getPath ());</span><br><span class="line">    BufferedInputStream bips = <span class="keyword">new</span> BufferedInputStream (<span class="keyword">new</span> FileInputStream (file));</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder ();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">byte</span>[] bytes = <span class="keyword">new</span> <span class="keyword">byte</span>[<span class="number">1024</span>];</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span> ((n = bips.read ()) != -<span class="number">1</span>) &#123;</span><br><span class="line">        bips.read (bytes, <span class="number">0</span>, n);</span><br><span class="line">        sb.append (<span class="keyword">new</span> String (bytes));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    System.out.println (sb.toString ());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​        字节流读取会出现乱码。</p><p>​                                                                                                                                                                                              </p><h2 id="字符流"><a href="# 字符流" class="headerlink" title="字符流"></a> 字符流 </h2><pre><code>     字符流是按照字符为基本单位来读取数据的，占两个字节，这种情况就不会出现中文乱码。</code></pre><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment">* 字符流 </span></span><br><span class="line"><span class="comment">*/</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">readerTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">    <span class="keyword">final</span> URL url = <span class="keyword">this</span>.getClass ().getClassLoader ().getResource (<span class="string">&quot;io/garbledTest.txt&quot;</span>);</span><br><span class="line">    File file = <span class="keyword">new</span> File (url.getPath ());</span><br><span class="line">    BufferedReader br = <span class="keyword">new</span> BufferedReader (<span class="keyword">new</span> InputStreamReader (<span class="keyword">new</span> FileInputStream (file)));</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder ();</span><br><span class="line">    <span class="keyword">while</span> (br.ready ()) &#123;</span><br><span class="line">        sb.append (br.readLine ());</span><br><span class="line">    &#125;</span><br><span class="line">    System.out.println (sb.toString ());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>​            字符流则不会乱码。</p><p> 源码参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYVl1VGlhbjExL2Jsb2dfZGVtby9ibG9iL21hc3Rlci9qYXZhOC9zcmMvdGVzdC9qYXZhL2NvbS9zdW5ueWRheS9pby9HYXJibGVkVGVzdC5qYXZh">https://github.com/xiaYuTian11/blog_demo/blob/master/java8/src/test/java/com/sunnyday/io/GarbledTest.java<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;​        最近进行项目重构，发现之前文件读取重构之后出现数据乱码。最后发现是因为字节流的问题。&lt;/p&gt;</summary>
    
    
    
    
    <category term="IO" scheme="http://tanmw.top/tags/IO/"/>
    
    <category term="中文乱码" scheme="http://tanmw.top/tags/%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot 分离资源文件打包及部署脚本</title>
    <link href="http://tanmw.top/archives/1f0b7068.html"/>
    <id>http://tanmw.top/archives/1f0b7068.html</id>
    <published>2020-09-04T11:24:30.000Z</published>
    <updated>2021-01-10T09:58:44.845Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="# 概述" class="headerlink" title="概述"></a> 概述 </h2><p>​            Spring Boot 项目打包默认会将资源文件一起打包，如果涉及到现场部署会不停的更改相关配置就会很烦，所以可以采用将配置文件及相关依赖分离出来。</p><a id="more"></a><h2 id="打包"><a href="# 打包" class="headerlink" title="打包"></a> 打包 </h2><h3 id="pom-xml"><a href="#pom-xml" class="headerlink" title="pom.xml"></a>pom.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-jar-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 将静态资源排除出 jar 包 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">excludes</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>static/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>templates/**<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 自定义自己的配置文件 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">exclude</span>&gt;</span>*.yml<span class="tag">&lt;/<span class="name">exclude</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">excludes</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">archive</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifest</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">addClasspath</span>&gt;</span>true<span class="tag">&lt;/<span class="name">addClasspath</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- MANIFEST.MF 中 Class-Path 加入前缀 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">classpathPrefix</span>&gt;</span>lib/<span class="tag">&lt;/<span class="name">classpathPrefix</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- jar 包不包含唯一版本标识 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">useUniqueVersions</span>&gt;</span>false<span class="tag">&lt;/<span class="name">useUniqueVersions</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 指定启动类的包路径 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">mainClass</span>&gt;</span>com.demo.Application<span class="tag">&lt;/<span class="name">mainClass</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifest</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!--MANIFEST.MF 中 Class-Path 加入资源文件目录 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">Class-Path</span>&gt;</span>config/<span class="tag">&lt;/<span class="name">Class-Path</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">manifestEntries</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">archive</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 指定打出的 jar 包路径 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这个插件是用来复制项目依赖的 jar 包 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-dependency-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 自定义 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 复制依赖的 jar 包 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-dependencies<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 将依赖的 jar 包复制到该路径下 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!-- 这个插件是用来复制项目的静态资源 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-resources-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 自定义 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 复制静态资源 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>copy-resources<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!-- 指定静态资源的路径 --&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/resources<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">                                    <span class="comment">&lt;!-- 指定需要复制的文件 --&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.*<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>static/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                        <span class="tag">&lt;<span class="name">include</span>&gt;</span>templates/**<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">                                    <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">                                <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">                            <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 指定复制到该目录下 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>$&#123;project.build.directory&#125;/config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 以上配置后你的文件打包后的文件目录如下 </span></span><br><span class="line"><span class="comment">                -lib</span></span><br><span class="line"><span class="comment">                -config</span></span><br><span class="line"><span class="comment">                - 项目名.jar</span></span><br><span class="line"><span class="comment">             --&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 这个插件使用来将分离出来的静态资源和依赖的 jar 包 (就是上面说到的文件目录)，</span></span><br><span class="line"><span class="comment">        压缩成一个 zip 文件。个人感觉这个蛮方便的 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">plugin</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.maven.plugins<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>maven-assembly-plugin<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">                    <span class="comment">&lt;!-- 这个插件需要指定一个配置文件 --&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">descriptor</span>&gt;</span>src/main/resources/assembly.xml<span class="tag">&lt;/<span class="name">descriptor</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">descriptors</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">executions</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;<span class="name">execution</span>&gt;</span></span><br><span class="line">                        <span class="comment">&lt;!-- 自定义 --&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">id</span>&gt;</span>make-assembly<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">phase</span>&gt;</span>package<span class="tag">&lt;/<span class="name">phase</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;<span class="name">goals</span>&gt;</span></span><br><span class="line">                            <span class="comment">&lt;!-- 只执行一次 --&gt;</span></span><br><span class="line">                            <span class="tag">&lt;<span class="name">goal</span>&gt;</span>single<span class="tag">&lt;/<span class="name">goal</span>&gt;</span></span><br><span class="line">                        <span class="tag">&lt;/<span class="name">goals</span>&gt;</span></span><br><span class="line">                    <span class="tag">&lt;/<span class="name">execution</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;/<span class="name">executions</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">plugin</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure><p>​            关于 MANIFEST.MF 的介绍可以查看 <span class="exturl" data-url="aHR0cHM6Ly9qdWVqaW4uaW0vcG9zdC82ODQ0OTAzODc2ODc3ODkzNjQw"> 这篇博客 <i class="fa fa-external-link-alt"></i></span>。</p><h3 id="assembly-xml"><a href="#assembly-xml" class="headerlink" title="assembly.xml"></a>assembly.xml</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">assembly</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">          <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://maven.apache.org/plugins/maven-assembly-plugin/assembly/1.1.0</span></span></span><br><span class="line"><span class="tag"><span class="string">                      http://maven.apache.org/xsd/assembly-1.1.0.xsd&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">id</span>&gt;</span>package<span class="tag">&lt;/<span class="name">id</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">formats</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 可以根据自己的需求定义压缩文件的格式 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">format</span>&gt;</span>zip<span class="tag">&lt;/<span class="name">format</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">formats</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 不包含根目录，如果为 true，生成的压缩文件会有一个根目录 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">includeBaseDirectory</span>&gt;</span>false<span class="tag">&lt;/<span class="name">includeBaseDirectory</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 指定需要压缩的文件清单 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">fileSets</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定你需要压缩的文件目录 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;/lib/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!-- 指定压缩后的文件目录 --&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>lib<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;/config/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>config<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>$&#123;project.build.directory&#125;/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.jar<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!-- 自定义 shell 脚本存放路径 --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">fileSet</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">directory</span>&gt;</span>shell/<span class="tag">&lt;/<span class="name">directory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">outputDirectory</span>&gt;</span>/<span class="tag">&lt;/<span class="name">outputDirectory</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">includes</span>&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">include</span>&gt;</span>*.sh<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">fileSet</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">fileSets</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">assembly</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="loader-path"><a href="#loader-path" class="headerlink" title="loader.path"></a>loader.path</h3><p>​        资源文件打包分离后，启动 jar 时不能正常加载资源目录及 lib,，解决方案是在启动时添加 loader.path 参数，具体可以参考官方文档：<span class="exturl" data-url="aHR0cHM6Ly9kb2NzLnNwcmluZy5pby9zcHJpbmctYm9vdC9kb2NzL2N1cnJlbnQvcmVmZXJlbmNlL2h0bWxzaW5nbGUvI2V4ZWN1dGFibGUtamFyLWxhdW5jaGluZw==">https://docs.spring.io/spring-boot/docs/current/reference/htmlsingle/#executable-jar-launching<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># jar lib resource 位于同一文件夹下 </span></span><br><span class="line">java -jar -Xms512m -Xmx2048m -Dloader.path=lib,resources test.jar</span><br></pre></td></tr></table></figure><h2 id="部署脚本"><a href="# 部署脚本" class="headerlink" title="部署脚本"></a> 部署脚本 </h2><h3 id="deploy-sh"><a href="#deploy-sh" class="headerlink" title="deploy.sh"></a>deploy.sh</h3><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">VM_OPTS=<span class="string">&quot;-Xms512m -Xmx2048m&quot;</span></span><br><span class="line">SPB_OPTS=<span class="string">&quot; -Dloader.path=lib,config&quot;</span></span><br><span class="line"><span class="comment"># 替换 jar 包路径及文件 </span></span><br><span class="line">APP_LOCATION=<span class="string">&quot;/tmw/honeypot/&quot;</span></span><br><span class="line">APP_NAME=<span class="string">&quot;honeypot-v0.1.0.jar&quot;</span></span><br><span class="line"><span class="comment"># 使用说明，用来提示输入参数 </span></span><br><span class="line"><span class="function"><span class="title">usage</span></span>() &#123;</span><br><span class="line">  <span class="built_in">echo</span> <span class="string">&quot;Usage: sh 执行脚本.sh [start|stop|restart|status]&quot;</span></span><br><span class="line">  <span class="built_in">exit</span> 1</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 检查程序是否在运行 </span></span><br><span class="line"><span class="function"><span class="title">is_exist</span></span>() &#123;</span><br><span class="line">  pid=$(ps -ef | grep <span class="variable">$APP_NAME</span> | grep -v grep | awk <span class="string">&#x27;&#123;print $2&#125;&#x27;</span>)</span><br><span class="line">  <span class="comment"># 如果不存在返回 1, 存在返回 0</span></span><br><span class="line">  <span class="keyword">if</span> [-z <span class="string">&quot;<span class="variable">$&#123;pid&#125;</span>&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">return</span> 1</span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">return</span> 0</span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动方法 </span></span><br><span class="line"><span class="function"><span class="title">start</span></span>() &#123;</span><br><span class="line">  is_exist</span><br><span class="line">  <span class="keyword">if</span> [$? -eq <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;APP_NAME&#125;</span> is already running. pid=<span class="variable">$&#123;pid&#125;</span> .&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    nohup java <span class="variable">$VM_OPTS</span> -jar <span class="variable">$APP_LOCATION</span><span class="variable">$APP_NAME</span> <span class="variable">$SPB_OPTS</span> &gt;/dev/null 2&gt;&amp;1 &amp;</span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;APP_NAME&#125;</span> start success. pid=<span class="variable">$&#123;pid&#125;</span> .&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 停止方法 </span></span><br><span class="line"><span class="function"><span class="title">stop</span></span>() &#123;</span><br><span class="line">  is_exist</span><br><span class="line">  <span class="keyword">if</span> [$? -eq <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">kill</span> -9 <span class="variable">$pid</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;APP_NAME&#125;</span> stop success. pid=<span class="variable">$&#123;pid&#125;</span> .&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;APP_NAME&#125;</span> is not running&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出运行状态 </span></span><br><span class="line"><span class="function"><span class="title">status</span></span>() &#123;</span><br><span class="line">  is_exist</span><br><span class="line">  <span class="keyword">if</span> [$? -eq <span class="string">&quot;0&quot;</span> ]; <span class="keyword">then</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;APP_NAME&#125;</span> is running. Pid is <span class="variable">$&#123;pid&#125;</span>&quot;</span></span><br><span class="line">  <span class="keyword">else</span></span><br><span class="line">    <span class="built_in">echo</span> <span class="string">&quot;<span class="variable">$&#123;APP_NAME&#125;</span> is NOT running.&quot;</span></span><br><span class="line">  <span class="keyword">fi</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment"># 重启 </span></span><br><span class="line"><span class="function"><span class="title">restart</span></span>() &#123;</span><br><span class="line">  stop</span><br><span class="line">  start</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据输入参数，选择执行对应方法，不输入则执行使用说明 </span></span><br><span class="line"><span class="keyword">case</span> <span class="string">&quot;<span class="variable">$1</span>&quot;</span> <span class="keyword">in</span></span><br><span class="line"><span class="string">&quot;start&quot;</span>)</span><br><span class="line">  start</span><br><span class="line">  ;;</span><br><span class="line"><span class="string">&quot;stop&quot;</span>)</span><br><span class="line">  stop</span><br><span class="line">  ;;</span><br><span class="line"><span class="string">&quot;status&quot;</span>)</span><br><span class="line">  status</span><br><span class="line">  ;;</span><br><span class="line"><span class="string">&quot;restart&quot;</span>)</span><br><span class="line">  restart</span><br><span class="line">  ;;</span><br><span class="line">*)</span><br><span class="line">  usage</span><br><span class="line">  ;;</span><br><span class="line"><span class="keyword">esac</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="dos2unix"><a href="#dos2unix" class="headerlink" title="dos2unix"></a>dos2unix</h2><p>​            windows 上编写的脚本在 Linux 上运行会出现错误，可以用 dos2unix 进行转义。</p><ol><li> 安装 dos2unix</li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y dos2unix</span><br></pre></td></tr></table></figure><ol start="2"><li> 转义 sh 文件 </li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dos2unix deploy.sh</span><br></pre></td></tr></table></figure><p>​            转义成功就可以正常运行了 </p><h2 id="Linux- 开机自启动 -SpringBoot- 项目"><a href="#Linux- 开机自启动 -SpringBoot- 项目" class="headerlink" title="Linux 开机自启动 SpringBoot 项目"></a>Linux 开机自启动 SpringBoot 项目 </h2><ol><li><p> 编写启动脚本 deploy.sh，参考上面。</p></li><li><p> 给 deploy.sh 文件添加执行权限 </p></li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/soft/sync/deploy.sh</span><br></pre></td></tr></table></figure><ol start="3"><li> 给 /etc/rc.d/rc.local 文件添加执行权限 </li></ol><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /etc/rc.d/rc.local</span><br></pre></td></tr></table></figure><ol start="4"><li> 在 /etc/rc.d/rc.local 文件末尾添加启动脚本命令 </li></ol><figure class="highlight sh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su - root -c <span class="string">&#x27;/usr/soft/sync/deploy.sh start&#x27;</span></span><br></pre></td></tr></table></figure><ol start="5"><li> 重启服务器验证脚本是否自启动成功。</li></ol><p> 相关配置可以根据自己需求进行修改，至此就可以愉快的进行玩耍啦！</p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;​            Spring Boot 项目打包默认会将资源文件一起打包，如果涉及到现场部署会不停的更改相关配置就会很烦，所以可以采用将配置文件及相关依赖分离出来。&lt;/p&gt;</summary>
    
    
    
    
    <category term="SpringBoot" scheme="http://tanmw.top/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ Connection Parameters</title>
    <link href="http://tanmw.top/archives/75c25f59.html"/>
    <id>http://tanmw.top/archives/75c25f59.html</id>
    <published>2020-09-02T06:36:19.000Z</published>
    <updated>2020-10-14T13:17:21.850Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="# 背景" class="headerlink" title="背景"></a>背景</h2><p>​          最近项目需要搭建 ActiveMQ 进行消息传输，但是在使用过程中发现与 ActiveMQ 长时间连接，但是没进行消息传输，或者网络波动等情况会造成连接挂掉的情况，由于 ActiveMQ 是支持断线重连机制，在此记录下使用到的几个配置及其中的一个坑。</p><a id="more"></a><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a>使用 </h2><p>​        本次只在代码中使用时配置到，如果需要在服务器上配置，请查看 <span class="exturl" data-url="aHR0cHM6Ly9hY3RpdmVtcS5hcGFjaGUub3JnL2ZhaWxvdmVyLXRyYW5zcG9ydC1yZWZlcmVuY2UuaHRtbA=="> 官方文档<i class="fa fa-external-link-alt"></i></span>。</p><p>** 配置多个 MQ 防止其中一个宕机。**</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//randomize 是否随机访问 </span></span><br><span class="line">failover:(tcp:<span class="comment">//primary:61616,tcp://secondary:61616)?randomize=false</span></span><br></pre></td></tr></table></figure><p>** 配置消息异步发送 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//useAsyncSend 是否启用异步发送消息 </span></span><br><span class="line"><span class="comment">//producerWindowSize 当发送消息大于 10M 也会启用异步发送 </span></span><br><span class="line">jms.useAsyncSend=<span class="keyword">true</span>&amp;jms.producerWindowSize=<span class="number">10240</span> </span><br></pre></td></tr></table></figure><p>​        配置异步发送消息可以对发送消息状态进行处理，如果发送失败可以自定义进行重新发送。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">((ActiveMQMessageProducer) producer).send (message, <span class="keyword">new</span> AsyncCallback () &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onSuccess</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        log.info (<span class="string">&quot; sendMessage to &#123;&#125; : &#123;&#125;&quot;</span>, queue, text);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">onException</span><span class="params">(JMSException exception)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">boolean</span> flag;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</span><br><span class="line">            log.error (<span class="string">&quot;sendMessage to &#123;&#125; 错误，进行重试 & quot;</span>, queue);</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                producer.send (message);</span><br><span class="line">                flag = <span class="keyword">true</span>;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">                log.error (<span class="string">&quot;sendMessage to &#123;&#125; with &#123;&#125; 重试错误，消息未正确发送 & quot;</span>, queue, text);</span><br><span class="line">                flag = <span class="keyword">false</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (flag) &#123;</span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    TimeUnit.SECONDS.sleep (<span class="number">5</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    log.error (<span class="string">&quot; 重发消息休眠异常 & quot;</span>, e);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>** 配置最大断线最大重试次数 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://activemq.apache.org/redelivery-policy</span></span><br><span class="line"><span class="comment">// 默认重试次数为 6 次，之后就会进入死信队列，-1 表示进行无限制重试 </span></span><br><span class="line">jms.redeliveryPolicy.maximumRedeliveries=-<span class="number">1</span></span><br></pre></td></tr></table></figure><p>** 配置重新连接等待时间 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://activemq.apache.org/failover-transport-reference.html</span></span><br><span class="line"><span class="comment">//initialReconnectDelay 第一次重新连接前的延迟时间（毫秒）</span></span><br><span class="line"><span class="comment">//maxReconnectDelay 第二和后续的重新连接尝试之间的最大延迟（毫秒）。</span></span><br><span class="line">initialReconnectDelay=<span class="number">10</span>&amp;maxReconnectDelay=<span class="number">15000</span></span><br></pre></td></tr></table></figure><p>** 禁用不活动自动断线 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//https://activemq.apache.org/configuring-wire-formats</span></span><br><span class="line"><span class="comment">// 最大不活动时间（毫秒），超过会自动终止连接，默认是 30000ms。</span></span><br><span class="line"><span class="comment">// 禁用非活动监视将值设置为 &lt;= 0 即可。</span></span><br><span class="line">wireFormat.maxInactivityDuration=<span class="number">0</span> </span><br></pre></td></tr></table></figure><h2 id="坑"><a href="# 坑" class="headerlink" title="坑"></a>坑</h2><p>​            当时禁用非活动监视时，照着官方文档上设置的如下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ActiveMQConnectionFactory cf = <span class="keyword">new</span> ActiveMQConnectionFactory (<span class="string">&quot;tcp://localhost:61616?wireFormat.cacheEnabled=false&amp;wireFormat.tightEncodingEnabled=false&quot;</span>);</span><br><span class="line"><span class="comment">// 将参数替换成 wireFormat.maxInactivityDuration=0 </span></span><br><span class="line">ActiveMQConnectionFactory cf = <span class="keyword">new</span> ActiveMQConnectionFactory (<span class="string">&quot;tcp://localhost:61616?wireFormat.maxInactivityDuration=0&quot;</span>);</span><br></pre></td></tr></table></figure><p>​            启动生成者时出现错误：<strong>Invalid connect parameters: {wireFormat.maxInactivityDuration=0}</strong></p><p><img src="./75c25f59/image-20200902151227315.png" alt="image-20200902151227315"></p><p>​        正确的设置方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failover:<span class="comment">//(tcp://47.110.133.228:61616?wireFormat.maxInactivityDuration=0)?jms.useAsyncSend=true......</span></span><br></pre></td></tr></table></figure><h2 id="Failover-（故障转移）"><a href="#Failover-（故障转移）" class="headerlink" title="Failover （故障转移）"></a>Failover （故障转移）</h2><p>​            启用故障转移后，当由于某种原因与当前服务器的连接丢失时，客户端可以自动重新连接到另一台服务器。故障转移 URI 始终使用故障转移前缀启动，服务器的 URI 列表包含在一组括号中。</p><p>​            Failover URL 示例：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">failover:(tcp://host1:5672,tcp://host2:5672)</span><br></pre></td></tr></table></figure><p>​            <code>Failover 模式默认会无限次的断线自动重连</code>。更多的配置可以参考 <span class="exturl" data-url="aHR0cHM6Ly9hY3RpdmVtcS5hcGFjaGUub3JnL2NvbXBvbmVudHMvbm1zL3Byb3ZpZGVycy9hbXFwL3VyaS1jb25maWd1cmF0aW9u">Failover Configuration options<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h2&gt;&lt;p&gt;​          最近项目需要搭建 ActiveMQ 进行消息传输，但是在使用过程中发现与 ActiveMQ 长时间连接，但是没进行消息传输，或者网络波动等情况会造成连接挂掉的情况，由于 ActiveMQ 是支持断线重连机制，在此记录下使用到的几个配置及其中的一个坑。&lt;/p&gt;</summary>
    
    
    
    
    <category term="MQ" scheme="http://tanmw.top/tags/MQ/"/>
    
    <category term="ActiveMQ" scheme="http://tanmw.top/tags/ActiveMQ/"/>
    
  </entry>
  
  <entry>
    <title>PostgreSQL Logical Replication (逻辑复制)</title>
    <link href="http://tanmw.top/archives/8c55eb1b.html"/>
    <id>http://tanmw.top/archives/8c55eb1b.html</id>
    <published>2020-08-28T12:37:19.000Z</published>
    <updated>2020-10-14T13:16:36.860Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="# 概述" class="headerlink" title="概述"></a> 概述 </h2><p>​        Postgres 9.4（2014 年 12 月发布）引入了一项称为逻辑复制（Logical Replication）的新功能。逻辑复制允许从数据库实时流式传输到外部系统的更改。物理复制和逻辑复制的区别在于逻辑复制以逻辑格式发送数据，而物理复制以二进制格式发送数据。</p><a id="more"></a><p>​        详细介绍查看官方文档：<span class="exturl" data-url="aHR0cHM6Ly9qZGJjLnBvc3RncmVzcWwub3JnL2RvY3VtZW50YXRpb24vaGVhZC9yZXBsaWNhdGlvbi5odG1s">https://jdbc.postgresql.org/documentation/head/replication.html<i class="fa fa-external-link-alt"></i></span></p><h2 id="配置"><a href="# 配置" class="headerlink" title="配置"></a> 配置 </h2><p>​        Postgresql 要想使用逻辑复制必须先将 postgresql. conf 中 wal_level 配置为 logical, 相应的 max_wal_senders 复制使用者的数量要合理配置，max_replication_slots 要使用逻辑复制必须大于 0；</p><p><code>postgresql. conf</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">wal_level = logical</span><br><span class="line">max_wal_senders = 8</span><br><span class="line">max_replication_slots = 2</span><br></pre></td></tr></table></figure><p><code>pg_hba. conf</code></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">local   replication   all                   trust</span><br><span class="line">host    replication   all   127.0.0.1/32    md5</span><br><span class="line">host    replication   all   ::1/128         md5</span><br><span class="line">hostall  all   0.0.0.0/0md5  </span><br><span class="line"># 更多配置含义查看：http://shouce.jb51.net/postgresql9_4_4/auth-pg-hba-conf.html</span><br></pre></td></tr></table></figure><h2 id="使用"><a href="# 使用" class="headerlink" title="使用"></a> 使用 </h2><p>​          逻辑复制使用复制槽在服务器上保留 WAL 日志，并定义用于将 WAL 日志解码为所需格式的解码插件，例如，您可以将更改解码为 json 等格式。这里方便演示使用 test_decoding 插件进行解码。</p><p>​          更多插件查看：<span class="exturl" data-url="aHR0cHM6Ly93aWtpLnBvc3RncmVzcWwub3JnL3dpa2kvTG9naWNhbF9EZWNvZGluZ19QbHVnaW5z">https://wiki.postgresql.org/wiki/Logical_Decoding_Plugins<i class="fa fa-external-link-alt"></i></span></p><p>** 针对整个数据库的逻辑复制 **</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String [] args)</span> <span class="keyword">throws</span> SQLException, InterruptedException </span>&#123;</span><br><span class="line">        String url = <span class="string">&quot;jdbc:postgresql://127.0.0.1:5432/dev&quot;</span>;</span><br><span class="line">        Properties props = <span class="keyword">new</span> Properties ();</span><br><span class="line">        PGProperty.USER.set (props, <span class="string">&quot;postgres&quot;</span>);</span><br><span class="line">        PGProperty.PASSWORD.set (props, <span class="string">&quot;20191809&quot;</span>);</span><br><span class="line">        PGProperty.ASSUME_MIN_SERVER_VERSION.set (props, <span class="string">&quot;9.4&quot;</span>);</span><br><span class="line">        PGProperty.REPLICATION.set (props, <span class="string">&quot;database&quot;</span>);</span><br><span class="line">        PGProperty.PREFER_QUERY_MODE.set (props, <span class="string">&quot;simple&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Connection con = DriverManager.getConnection (url, props);</span><br><span class="line">        PGConnection replConnection = con.unwrap (PGConnection.class);</span><br><span class="line">        Statement statement = con.createStatement ();</span><br><span class="line">        </span><br><span class="line">        <span class="comment">// 删除复制槽 </span></span><br><span class="line">        <span class="comment">//replConnection.getReplicationAPI ().dropReplicationSlot (&quot;demo_logical_slot&quot;);</span></span><br><span class="line">        </span><br><span class="line">    <span class="comment">// 创建 demo_logical_slot</span></span><br><span class="line">        replConnection.getReplicationAPI ()</span><br><span class="line">                .createReplicationSlot ()</span><br><span class="line">                .logical ()</span><br><span class="line">                .withSlotName (<span class="string">&quot;demo_logical_slot&quot;</span>)</span><br><span class="line">                .withOutputPlugin (<span class="string">&quot;test_decoding&quot;</span>)</span><br><span class="line">                .make ();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 创建逻辑复制流，设置超时时间 </span></span><br><span class="line">        PGReplicationStream stream = replConnection.getReplicationAPI ()</span><br><span class="line">                .replicationStream ()</span><br><span class="line">                .logical ()</span><br><span class="line">                .withSlotName (<span class="string">&quot;demo_logical_slot&quot;</span>)</span><br><span class="line">                .withSlotOption (<span class="string">&quot;include-xids&quot;</span>, <span class="keyword">false</span>)</span><br><span class="line">                .withSlotOption (<span class="string">&quot;skip-empty-xacts&quot;</span>, <span class="keyword">true</span>)</span><br><span class="line">                .withStatusInterval (<span class="number">20</span>, TimeUnit.SECONDS)</span><br><span class="line">                .start ();</span><br><span class="line">        </span><br><span class="line">       <span class="comment">// 更改数据库表数据，这里可以获取数据 </span></span><br><span class="line">        <span class="keyword">while</span> (<span class="keyword">true</span>) &#123;</span><br><span class="line">            <span class="comment">//non blocking receive message</span></span><br><span class="line">            ByteBuffer msg = stream.readPending ();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (msg == <span class="keyword">null</span>) &#123;</span><br><span class="line">                TimeUnit.MILLISECONDS.sleep (<span class="number">10L</span>);</span><br><span class="line">                <span class="keyword">continue</span>;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="keyword">int</span> offset = msg.arrayOffset ();</span><br><span class="line">            <span class="keyword">byte</span>[] source = msg.array ();</span><br><span class="line">            <span class="keyword">int</span> length = source.length - offset;</span><br><span class="line">            <span class="keyword">final</span> String s = <span class="keyword">new</span> String (source, offset, length);</span><br><span class="line">            System.out.println (s);</span><br><span class="line">            <span class="comment">//feedback</span></span><br><span class="line">            <span class="comment">// 反馈服务器，向服务器提供已成功接收并应用于消费者的日志序列编号 （LSN）</span></span><br><span class="line">            stream.setAppliedLSN (stream.getLastReceiveLSN ());</span><br><span class="line">            stream.setFlushedLSN (stream.getLastReceiveLSN ());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>** 只针对指定表的逻辑复制 **</p><p> 步骤：</p><p>1。创建针对表创建订阅，及接收数据的操作类型 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> PUBLICATION YOUR_PUBLICATION_NAME) <span class="keyword">FOR</span> <span class="keyword">TABLE</span> YOUR_TABLE_NAME <span class="keyword">WITH</span> (publish = <span class="string">&#x27;insert,update,delete&#x27;</span>);</span><br></pre></td></tr></table></figure><p>2。设置表同步数据的字段，最后 FULL 参数可变。</p><p> 参照官方文档：<span class="exturl" data-url="aHR0cHM6Ly93d3cucG9zdGdyZXNxbC5vcmcvZG9jcy8xMC9zcWwtYWx0ZXJ0YWJsZS5odG1sI1NRTC1DUkVBVEVUQUJMRS1SRVBMSUNBLUlERU5USVRZ">https://www.postgresql.org/docs/10/sql-altertable.html#SQL-CREATETABLE-REPLICA-IDENTITY<i class="fa fa-external-link-alt"></i></span></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> TABLE_NAME REPLICA <span class="keyword">IDENTITY</span> <span class="keyword">FULL</span></span><br></pre></td></tr></table></figure><p>3。创建复制槽 </p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">CREATE_REPLICATION_SLOT  YOUR_SOLT_NAME  有效期  LOGICAL 解码插件名称；</span><br></pre></td></tr></table></figure><p>4。获取 PGReplicationStream，同上。</p><p> 详情参照官方文档地址：<span class="exturl" data-url="aHR0cDovL3d3dy5wb3N0Z3Jlcy5jbi9kb2NzLzExL3NxbC1jcmVhdGVwdWJsaWNhdGlvbi5odG1s">http://www.postgres.cn/docs/11/sql-createpublication.html<i class="fa fa-external-link-alt"></i></span></p><p> 解码插件可以参考：<span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL2RlYmV6aXVtL2RlYmV6aXVt">https://github.com/debezium/debezium<i class="fa fa-external-link-alt"></i></span></p><p> 完整代码可以查看： <span class="exturl" data-url="aHR0cHM6Ly9naXRodWIuY29tL3hpYVl1VGlhbjExL3Bvc3RncmVzcWwtbWVzc2FnZQ==">https://github.com/xiaYuTian11/postgresql-message<i class="fa fa-external-link-alt"></i></span></p>]]></content>
    
    
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;p&gt;​        Postgres 9.4（2014 年 12 月发布）引入了一项称为逻辑复制（Logical Replication）的新功能。逻辑复制允许从数据库实时流式传输到外部系统的更改。物理复制和逻辑复制的区别在于逻辑复制以逻辑格式发送数据，而物理复制以二进制格式发送数据。&lt;/p&gt;</summary>
    
    
    
    
    <category term="PostgreSQL" scheme="http://tanmw.top/tags/PostgreSQL/"/>
    
  </entry>
  
</feed>
